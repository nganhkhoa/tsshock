{
  "version": "3.4",
  "log": [
    {
      "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:EcdsaDkgValidator": {
        "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:61",
        "version": {
          "withMetadata": "c0033e1c5d8103ec670c9b8aa4182846942a4e925173551b59feb7353515bb92",
          "withoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573",
          "linkedWithoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address)",
          "validate((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256,uint256)",
          "validateFields((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "validateGroupMembers((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateSignatures((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateMembersHash((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EcdsaDkgValidator",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:94"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sortitionPool",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/WalletRegistry.sol:WalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:64",
        "version": {
          "withMetadata": "293b66225bd2fc211b894cef0c6e654d14ca3c074e8311062a3fb17b1a5665aa",
          "withoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690",
          "linkedWithoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable",
          "@keep-network/random-beacon/contracts/Governable.sol:Governable",
          "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication",
          "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer",
          "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry"
        ],
        "libraries": [
          "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization",
          "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg",
          "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets",
          "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity"
        ],
        "methods": [
          "(address,address)",
          "initialize(address,address,address)",
          "withdrawRewards(address)",
          "withdrawIneligibleRewards(address)",
          "registerOperator(address)",
          "joinSortitionPool()",
          "updateOperatorStatus(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "approveAuthorizationDecrease(address)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "upgradeRandomBeacon(address)",
          "updateWalletOwner(address)",
          "updateAuthorizationParameters(uint96,uint64,uint64)",
          "updateDkgParameters(uint256,uint256,uint256,uint256,uint256)",
          "updateRewardParameters(uint256,uint256)",
          "updateSlashingParameters(uint96)",
          "updateGasParameters(uint256,uint256,uint256,uint256,uint256)",
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "__beaconCallback(uint256,uint256)",
          "submitDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "approveDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifySeedTimeout()",
          "notifyDkgTimeout()",
          "challengeDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifyOperatorInactivity((bytes32,uint256[],bool,bytes,uint256[]),uint256,uint32[])",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "isDkgResultValid((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)",
          "hasSeedTimedOut()",
          "hasDkgTimedOut()",
          "getWallet(bytes32)",
          "getWalletPublicKey(bytes32)",
          "isWalletRegistered(bytes32)",
          "minimumAuthorization()",
          "eligibleStake(address)",
          "availableRewards(address)",
          "pendingAuthorizationDecrease(address)",
          "remainingAuthorizationDecreaseDelay(address)",
          "stakingProviderToOperator(address)",
          "operatorToStakingProvider(address)",
          "isOperatorUpToDate(address)",
          "isOperatorInPool(address)",
          "selectGroup()",
          "dkgParameters()",
          "authorizationParameters()",
          "rewardParameters()",
          "slashingParameters()",
          "gasParameters()"
        ],
        "linkReferences": [
          {
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol",
            "name": "EcdsaInactivity",
            "length": 20,
            "start": 6842,
            "placeholder": "__$c28dd63714b1a086d50ecbb702fff9dbb7$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "EcdsaInactivity",
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "100",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "100",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "authorization",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Data)2545_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "dkg",
              "offset": 0,
              "slot": "151",
              "type": "t_struct(Data)3498_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "202",
              "type": "t_struct(Data)4802_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:71"
            },
            {
              "label": "_maliciousDkgResultSlashingAmount",
              "offset": 0,
              "slot": "252",
              "type": "t_uint96",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:78"
            },
            {
              "label": "_maliciousDkgResultNotificationRewardMultiplier",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:88"
            },
            {
              "label": "_sortitionPoolRewardsBanDuration",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:93"
            },
            {
              "label": "_dkgResultSubmissionGas",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:101"
            },
            {
              "label": "_dkgResultApprovalGasOffset",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:106"
            },
            {
              "label": "_notifyOperatorInactivityGasOffset",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:111"
            },
            {
              "label": "_notifySeedTimeoutGasOffset",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:118"
            },
            {
              "label": "_notifyDkgTimeoutNegativeGasOffset",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:135"
            },
            {
              "label": "inactivityClaimNonce",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:149"
            },
            {
              "label": "walletOwner",
              "offset": 0,
              "slot": "261",
              "type": "t_contract(IWalletOwner)2448",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:158"
            },
            {
              "label": "randomBeacon",
              "offset": 0,
              "slot": "262",
              "type": "t_contract(IRandomBeacon)5484",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:169"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)38_storage": {
              "label": "uint256[38]",
              "numberOfBytes": "1216"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EcdsaDkgValidator)649": {
              "label": "contract EcdsaDkgValidator",
              "numberOfBytes": "20"
            },
            "t_contract(IRandomBeacon)5484": {
              "label": "contract IRandomBeacon",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletOwner)2448": {
              "label": "contract IWalletOwner",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(SortitionPool)7713": {
              "label": "contract SortitionPool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)": {
              "label": "mapping(address => struct EcdsaAuthorization.AuthorizationDecrease)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)": {
              "label": "mapping(bytes32 => struct Wallets.Wallet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AuthorizationDecrease)2524_storage": {
              "label": "struct EcdsaAuthorization.AuthorizationDecrease",
              "members": [
                {
                  "label": "decreasingBy",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "decreasingAt",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Data)2545_storage": {
              "label": "struct EcdsaAuthorization.Data",
              "members": [
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)2519_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingProviderToOperator",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "operatorToStakingProvider",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pendingDecreases",
                  "type": "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)46_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Data)3498_storage": {
              "label": "struct EcdsaDkg.Data",
              "members": [
                {
                  "label": "sortitionPool",
                  "type": "t_contract(SortitionPool)7713",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "dkgValidator",
                  "type": "t_contract(EcdsaDkgValidator)649",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)3472_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "stateLockBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "seed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "resultSubmissionStartBlockOffset",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "submittedResultHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "submittedResultBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)38_storage",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "1632"
            },
            "t_struct(Data)4802_storage": {
              "label": "struct Wallets.Data",
              "members": [
                {
                  "label": "registry",
                  "type": "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)49_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Parameters)2519_storage": {
              "label": "struct EcdsaAuthorization.Parameters",
              "members": [
                {
                  "label": "minimumAuthorization",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseDelay",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseChangePeriod",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Parameters)3472_storage": {
              "label": "struct EcdsaDkg.Parameters",
              "members": [
                {
                  "label": "seedTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "resultChallengePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "resultChallengeExtraGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "resultSubmissionTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submitterPrecedencePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Wallet)4792_storage": {
              "label": "struct Wallets.Wallet",
              "members": [
                {
                  "label": "membersIdsHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicKeyX",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicKeyY",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:39",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "getWalletPublicKey(bytes32)",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:42",
        "version": {
          "withMetadata": "d0daf2be244863b2bd4fdb8c3da6318b9294b8a7137e64f44f6cf0e9ad1681b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:53",
        "version": {
          "withMetadata": "6f6ee0cab2fd85971e8077afef6f1855995cfa0b5ffeb0013aa3b9a06768372c",
          "withoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c",
          "linkedWithoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:43",
        "version": {
          "withMetadata": "121b3da99ae62bd0c7aca743a52ca2c8e990350ccbfcea45b55b95ee58095344",
          "withoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0",
          "linkedWithoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "verifyClaim(address,(bytes32,uint256[],bool,bytes,uint256[]),bytes,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets": {
        "src": "@keep-network/ecdsa/contracts/libraries/Wallets.sol:40",
        "version": {
          "withMetadata": "f4cbe00e94a13dbc7fa06ce7ca426e501fc1edd0698a6462755df6f6c59dc000",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Governable.sol:Governable": {
        "src": "@keep-network/random-beacon/contracts/Governable.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferGovernance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable": {
        "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateReimbursementPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool": {
        "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:48",
        "version": {
          "withMetadata": "d0c5c334a1605f898ae7610b1d06b3e28ac2e9933fafe74f2bc2aee4e653f1a4",
          "withoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2",
          "linkedWithoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "()",
          "refund(uint256,address)",
          "authorize(address)",
          "unauthorize(address)",
          "setStaticGas(uint256)",
          "setMaxGasPrice(uint256)",
          "withdrawAll(address)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReimbursementPool",
            "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "isAuthorized",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:55"
            },
            {
              "label": "staticGas",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:57"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:IRandomBeacon": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestRelayEntry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:27",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:72",
        "version": {
          "withMetadata": "73a66cd6b2b4f71f15c78244cdfe17d5a5bccc2241887339922902ff3b6ef1a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Branch.sol:Branch": {
        "src": "@keep-network/sortition-pools/contracts/Branch.sol:8",
        "version": {
          "withMetadata": "8fb455cf6ab0b1cab36cf7bf6e14a076350f1d0970b14174d38392df089ecc28",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet": {
        "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:8",
        "version": {
          "withMetadata": "e49e66c9d013eab8870a4804cd258742749067d87c78d8ddb800b154fda34fd5",
          "withoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654",
          "linkedWithoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "addBetaOperators(address[])",
          "deactivateChaosnet()",
          "transferChaosnetOwnerRole(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Chaosnet",
            "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isChaosnetActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Constants.sol:Constants": {
        "src": "@keep-network/sortition-pools/contracts/Constants.sol:3",
        "version": {
          "withMetadata": "ec35b91a23fbe90c7a0b0f40e7a8d47a3a43f83250433121642f230eb09dc8e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf": {
        "src": "@keep-network/sortition-pools/contracts/Leaf.sol:5",
        "version": {
          "withMetadata": "8a207d81868067ff6e3916b6dacd4beaf052e3d7a220bc030a150b46dd44a5f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Position.sol:Position": {
        "src": "@keep-network/sortition-pools/contracts/Position.sol:5",
        "version": {
          "withMetadata": "5a1257fee5f756007ea5b501c3cd51fdcaf1afdb587349f92a9022a456c518b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/RNG.sol:RNG": {
        "src": "@keep-network/sortition-pools/contracts/RNG.sol:6",
        "version": {
          "withMetadata": "724ed9f7a4cf16ebb06a838aa9c9412a8cd129ab113f7e1bb6d29ed89a730c5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards": {
        "src": "@keep-network/sortition-pools/contracts/Rewards.sol:29",
        "version": {
          "withMetadata": "da0291a7a9cf48af708faf4199614b92a77cc3f40e5094a84a320342820023bb",
          "withoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25",
          "linkedWithoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ineligibleOffsetStart",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "1",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            }
          ],
          "types": {
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionPool.sol:SortitionPool": {
        "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:17",
        "version": {
          "withMetadata": "9fb55928391a87b8ef87b66191bc0955436413cb417ebf9b52442f2998e121db",
          "withoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168",
          "linkedWithoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168"
        },
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval",
          "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards",
          "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree"
        ],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/RNG.sol:RNG"
        ],
        "methods": [
          "(address,uint256)",
          "receiveApproval(address,uint256,address,bytes)",
          "withdrawRewards(address,address)",
          "withdrawIneligible(address)",
          "lock()",
          "unlock()",
          "insertOperator(address,uint256)",
          "updateOperatorStatus(address,uint256)",
          "setRewardIneligibility(uint32[],uint256)",
          "restoreRewardEligibility(address)",
          "isEligibleForRewards(address)",
          "rewardsEligibilityRestorableAt(address)",
          "canRestoreRewardEligibility(address)",
          "getAvailableRewards(address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "getPoolWeight(address)",
          "selectGroup(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionPool",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolWeightDivisor",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            },
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "9",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "isChaosnetActive",
              "offset": 20,
              "slot": "11",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            },
            {
              "label": "isLocked",
              "offset": 20,
              "slot": "13",
              "type": "t_bool",
              "contract": "SortitionPool",
              "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree": {
        "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:8",
        "version": {
          "withMetadata": "ee73ab4e8ed9253e3bfae0552a70b701c9af6c07326693decd6d17db8b7da901",
          "withoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7",
          "linkedWithoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [
          "()",
          "getOperatorID(address)",
          "getIDOperator(uint32)",
          "getIDOperators(uint32[])",
          "isOperatorRegistered(address)",
          "operatorsInPool()",
          "totalWeight()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionTree",
            "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7834828060f66da0039d30efb993f5f2643830d689ce2cdff803e8bbc308450e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "906cb7f0f5843b27e17df40f0dd37e51fd474892ce29df3caa57f7fc546ad01a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "d56dabd2b65ded96fca818086b2a2fd86ae5f0bda70fbccc2a0eecc15ed15953",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "702cc24e7a5c1d8e4d3a9f406b88de52aca211c426d4604c89a179d27c75ca0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "7f865809d60e93c3efd7b1af4bb15ff776ba9f3c7d1dc7885f79e07cc58f912c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efd3171a58b3b917cd07f35f8c485937fa0a30b212c4893ad6f264c9462a8195",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "6897bf0cdeb3ece2f2c03f8c94ed94150b8823eb184d5db12c18ef333f3fefcf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b0fccc5c954af5dd9623899b14b929d5a8f094ab28d9ba58a8ea4e0d549f4bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ff6c2317c31a63a013d923ab3df84fa78f33ae956c5917a3837aedb7bbcbd1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall": {
        "src": "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:IERC20WithPermit": {
        "src": "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:18",
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "DOMAIN_SEPARATOR()",
          "nonce(address)",
          "PERMIT_TYPEHASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval": {
        "src": "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveApproval(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:32",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "availableRewards(address)",
          "minimumAuthorization()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:IStaking": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,address payable,address,uint96)",
          "stakeKeep(address)",
          "stakeNu(address,address payable,address)",
          "refreshKeepStakeOwner(address)",
          "setMinimumStakeAmount(uint96)",
          "approveApplication(address)",
          "increaseAuthorization(address,address,uint96)",
          "requestAuthorizationDecrease(address,address,uint96)",
          "requestAuthorizationDecrease(address)",
          "approveAuthorizationDecrease(address)",
          "forceDecreaseAuthorization(address,address)",
          "pauseApplication(address)",
          "disableApplication(address)",
          "setPanicButton(address,address)",
          "setAuthorizationCeiling(uint256)",
          "topUp(address,uint96)",
          "topUpKeep(address)",
          "topUpNu(address)",
          "unstakeT(address,uint96)",
          "unstakeKeep(address)",
          "unstakeNu(address,uint96)",
          "unstakeAll(address)",
          "notifyKeepStakeDiscrepancy(address)",
          "notifyNuStakeDiscrepancy(address)",
          "setStakeDiscrepancyPenalty(uint96,uint256)",
          "setNotificationReward(uint96)",
          "pushNotificationReward(uint96)",
          "withdrawNotificationReward(address,uint96)",
          "slash(uint96,address[])",
          "seize(uint96,uint256,address,address[])",
          "processSlashing(uint256)",
          "authorizedStake(address,address)",
          "stakes(address)",
          "getStartStakingTimestamp(address)",
          "stakedNu(address)",
          "rolesOf(address)",
          "getApplicationsLength()",
          "getSlashingQueueLength()",
          "getMinStaked(address,uint8)",
          "getAvailableToAuthorize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bank": {
        "src": "contracts/Main.sol:121",
        "version": {
          "withMetadata": "acb2bc233156153c4a87710932cc9bebc54acc3cbc94e6ae8dd4d1a3325f888d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bridge": {
        "src": "contracts/Main.sol:196",
        "version": {
          "withMetadata": "28e224b9c6181d5b3d4ffb6b9a0c6ecb2138411bc4efdbabbb19c4a7adcad09e",
          "withoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2",
          "linkedWithoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "contractReferences()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bridge",
            "src": "contracts/Main.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_bank",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Bank)13221",
              "contract": "Bridge",
              "src": "contracts/Main.sol:197"
            },
            {
              "label": "_relay",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Relay)13222",
              "contract": "Bridge",
              "src": "contracts/Main.sol:198"
            },
            {
              "label": "_ecdsaWalletRegistry",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IWalletRegistry2)13297",
              "contract": "Bridge",
              "src": "contracts/Main.sol:199"
            },
            {
              "label": "_reimbursementPool",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Bridge",
              "src": "contracts/Main.sol:200"
            }
          ],
          "types": {
            "t_contract(Bank)13221": {
              "label": "contract Bank",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13297": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(Relay)13222": {
              "label": "contract Relay",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IMockRandomBaconConsumer": {
        "src": "contracts/Main.sol:90",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IWalletRegistry2": {
        "src": "contracts/Main.sol:184",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address)",
          "updateWalletOwner(address)",
          "requestNewWallet()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Main": {
        "src": "contracts/Main.sol:224",
        "version": {
          "withMetadata": "8dfad6531418cad4a35bb069777db231969573eee725ea04ff0e0237a16c11c1",
          "withoutMetadata": "fa70a81cf372b3bfef451bc7ae1e374acd3036f981201fdc33581addde9b15e9",
          "linkedWithoutMetadata": "fa70a81cf372b3bfef451bc7ae1e374acd3036f981201fdc33581addde9b15e9"
        },
        "inherit": [
          "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setWalletRegistry(address)",
          "invokeWallet()",
          "invokeRelay()",
          "heartbeat(bytes20)",
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Main",
            "src": "contracts/Main.sol:236"
          },
          {
            "kind": "state-variable-assignment",
            "name": "m",
            "src": "contracts/Main.sol:234"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "randomBacon",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockRandomBacon)13220",
              "contract": "Main",
              "src": "contracts/Main.sol:225"
            },
            {
              "label": "bridge",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Bridge)13380",
              "contract": "Main",
              "src": "contracts/Main.sol:226"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IStaking)12926",
              "contract": "Main",
              "src": "contracts/Main.sol:227"
            },
            {
              "label": "walletRegistry",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IWalletRegistry2)13297",
              "contract": "Main",
              "src": "contracts/Main.sol:228"
            },
            {
              "label": "walletCoordinator",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(WalletCoordinator)13282",
              "contract": "Main",
              "src": "contracts/Main.sol:229"
            },
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(MockSortitionPool)13132",
              "contract": "Main",
              "src": "contracts/Main.sol:230"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Main",
              "src": "contracts/Main.sol:231"
            },
            {
              "label": "walletID",
              "offset": 0,
              "slot": "7",
              "type": "t_bytes32",
              "contract": "Main",
              "src": "contracts/Main.sol:233"
            },
            {
              "label": "m",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Main",
              "src": "contracts/Main.sol:234"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(Bridge)13380": {
              "label": "contract Bridge",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13297": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(MockRandomBacon)13220": {
              "label": "contract MockRandomBacon",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13132": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(WalletCoordinator)13282": {
              "label": "contract WalletCoordinator",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockRandomBacon": {
        "src": "contracts/Main.sol:95",
        "version": {
          "withMetadata": "3826254820c3e6a2ab5dd91b7bf924ddb5d2286fa7354ecb75e51a8cdbb51354",
          "withoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898",
          "linkedWithoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "requestRelayEntry(address)",
          "invokeRelay()",
          "operatorToStakingProvider(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockRandomBacon",
            "src": "contracts/Main.sol:101"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/Main.sol:98"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockSortitionPool)13132",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:96"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStaking)12926",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:97"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:98"
            },
            {
              "label": "callback",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IMockRandomBaconConsumer)13153",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:99"
            }
          ],
          "types": {
            "t_contract(IMockRandomBaconConsumer)13153": {
              "label": "contract IMockRandomBaconConsumer",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13132": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockSortitionPool": {
        "src": "contracts/Main.sol:9",
        "version": {
          "withMetadata": "330092f43a0825853c1e716d98b3907959f3414472c565a184ddda7d433745ce",
          "withoutMetadata": "720590604f4ad96ed71f9835ce907098db0912ba09fb5f585aa9def474c46be5",
          "linkedWithoutMetadata": "720590604f4ad96ed71f9835ce907098db0912ba09fb5f585aa9def474c46be5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "isEligibleForRewards(address)",
          "lock()",
          "unlock()",
          "selectGroup(uint256,bytes32)",
          "getIDOperators(uint32[])",
          "getIDOperator(uint32)",
          "getOperatorID(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSortitionPool",
            "src": "contracts/Main.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isLocked",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:10"
            },
            {
              "label": "maliciousOp",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:11"
            },
            {
              "label": "honestOp",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockStaking": {
        "src": "contracts/Main.sol:81",
        "version": {
          "withMetadata": "642139a0a418c469276d775e24f9dc0ae0fb468ab8b75b99703a28c685bcab84",
          "withoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b",
          "linkedWithoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "authorizedStake(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Relay": {
        "src": "contracts/Main.sol:125",
        "version": {
          "withMetadata": "c2c77e3f2127fb6b5f5cd4dfdcc06463e363f1415e3dce2629f9742aa87a3af7",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:StakingProvider": {
        "src": "contracts/Main.sol:190",
        "version": {
          "withMetadata": "021e9b5624a8cf559b948e3ad269c232d797b770d60ca07a33c4792b7b1a6104",
          "withoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3",
          "linkedWithoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:WalletCoordinator": {
        "src": "contracts/Main.sol:131",
        "version": {
          "withMetadata": "6121e85750235680d3dd0c1f2b250a19bedac5ffb1369646ab8df26a87eb775d",
          "withoutMetadata": "94c544a8dbd84b3d42c4c95f58dfb1f8109e398962c8ae822b5cfd97295e0c8a",
          "linkedWithoutMetadata": "94c544a8dbd84b3d42c4c95f58dfb1f8109e398962c8ae822b5cfd97295e0c8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestHeartbeat(bytes20,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "walletLock",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes20,t_struct(WalletLock)13237_storage)",
              "contract": "WalletCoordinator",
              "src": "contracts/Main.sol:158"
            }
          ],
          "types": {
            "t_bytes20": {
              "label": "bytes20",
              "numberOfBytes": "20"
            },
            "t_enum(WalletAction)13229": {
              "label": "enum WalletCoordinator.WalletAction",
              "members": [
                "Idle",
                "Heartbeat",
                "DepositSweep",
                "Redemption",
                "MovingFunds",
                "MovedFundsSweep"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes20,t_struct(WalletLock)13237_storage)": {
              "label": "mapping(bytes20 => struct WalletCoordinator.WalletLock)",
              "numberOfBytes": "32"
            },
            "t_struct(WalletLock)13237_storage": {
              "label": "struct WalletCoordinator.WalletLock",
              "members": [
                {
                  "label": "expiresAt",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cause",
                  "type": "t_enum(WalletAction)13229",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:EcdsaDkgValidator": {
        "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:61",
        "version": {
          "withMetadata": "c0033e1c5d8103ec670c9b8aa4182846942a4e925173551b59feb7353515bb92",
          "withoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573",
          "linkedWithoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address)",
          "validate((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256,uint256)",
          "validateFields((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "validateGroupMembers((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateSignatures((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateMembersHash((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EcdsaDkgValidator",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:94"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sortitionPool",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/WalletRegistry.sol:WalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:64",
        "version": {
          "withMetadata": "293b66225bd2fc211b894cef0c6e654d14ca3c074e8311062a3fb17b1a5665aa",
          "withoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690",
          "linkedWithoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable",
          "@keep-network/random-beacon/contracts/Governable.sol:Governable",
          "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication",
          "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer",
          "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry"
        ],
        "libraries": [
          "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization",
          "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg",
          "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets",
          "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity"
        ],
        "methods": [
          "(address,address)",
          "initialize(address,address,address)",
          "withdrawRewards(address)",
          "withdrawIneligibleRewards(address)",
          "registerOperator(address)",
          "joinSortitionPool()",
          "updateOperatorStatus(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "approveAuthorizationDecrease(address)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "upgradeRandomBeacon(address)",
          "updateWalletOwner(address)",
          "updateAuthorizationParameters(uint96,uint64,uint64)",
          "updateDkgParameters(uint256,uint256,uint256,uint256,uint256)",
          "updateRewardParameters(uint256,uint256)",
          "updateSlashingParameters(uint96)",
          "updateGasParameters(uint256,uint256,uint256,uint256,uint256)",
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "__beaconCallback(uint256,uint256)",
          "submitDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "approveDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifySeedTimeout()",
          "notifyDkgTimeout()",
          "challengeDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifyOperatorInactivity((bytes32,uint256[],bool,bytes,uint256[]),uint256,uint32[])",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "isDkgResultValid((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)",
          "hasSeedTimedOut()",
          "hasDkgTimedOut()",
          "getWallet(bytes32)",
          "getWalletPublicKey(bytes32)",
          "isWalletRegistered(bytes32)",
          "minimumAuthorization()",
          "eligibleStake(address)",
          "availableRewards(address)",
          "pendingAuthorizationDecrease(address)",
          "remainingAuthorizationDecreaseDelay(address)",
          "stakingProviderToOperator(address)",
          "operatorToStakingProvider(address)",
          "isOperatorUpToDate(address)",
          "isOperatorInPool(address)",
          "selectGroup()",
          "dkgParameters()",
          "authorizationParameters()",
          "rewardParameters()",
          "slashingParameters()",
          "gasParameters()"
        ],
        "linkReferences": [
          {
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol",
            "name": "EcdsaInactivity",
            "length": 20,
            "start": 6842,
            "placeholder": "__$c28dd63714b1a086d50ecbb702fff9dbb7$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "EcdsaInactivity",
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "100",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "100",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "authorization",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Data)2545_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "dkg",
              "offset": 0,
              "slot": "151",
              "type": "t_struct(Data)3498_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "202",
              "type": "t_struct(Data)4802_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:71"
            },
            {
              "label": "_maliciousDkgResultSlashingAmount",
              "offset": 0,
              "slot": "252",
              "type": "t_uint96",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:78"
            },
            {
              "label": "_maliciousDkgResultNotificationRewardMultiplier",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:88"
            },
            {
              "label": "_sortitionPoolRewardsBanDuration",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:93"
            },
            {
              "label": "_dkgResultSubmissionGas",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:101"
            },
            {
              "label": "_dkgResultApprovalGasOffset",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:106"
            },
            {
              "label": "_notifyOperatorInactivityGasOffset",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:111"
            },
            {
              "label": "_notifySeedTimeoutGasOffset",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:118"
            },
            {
              "label": "_notifyDkgTimeoutNegativeGasOffset",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:135"
            },
            {
              "label": "inactivityClaimNonce",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:149"
            },
            {
              "label": "walletOwner",
              "offset": 0,
              "slot": "261",
              "type": "t_contract(IWalletOwner)2448",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:158"
            },
            {
              "label": "randomBeacon",
              "offset": 0,
              "slot": "262",
              "type": "t_contract(IRandomBeacon)5484",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:169"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)38_storage": {
              "label": "uint256[38]",
              "numberOfBytes": "1216"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EcdsaDkgValidator)649": {
              "label": "contract EcdsaDkgValidator",
              "numberOfBytes": "20"
            },
            "t_contract(IRandomBeacon)5484": {
              "label": "contract IRandomBeacon",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletOwner)2448": {
              "label": "contract IWalletOwner",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(SortitionPool)7713": {
              "label": "contract SortitionPool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)": {
              "label": "mapping(address => struct EcdsaAuthorization.AuthorizationDecrease)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)": {
              "label": "mapping(bytes32 => struct Wallets.Wallet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AuthorizationDecrease)2524_storage": {
              "label": "struct EcdsaAuthorization.AuthorizationDecrease",
              "members": [
                {
                  "label": "decreasingBy",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "decreasingAt",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Data)2545_storage": {
              "label": "struct EcdsaAuthorization.Data",
              "members": [
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)2519_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingProviderToOperator",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "operatorToStakingProvider",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pendingDecreases",
                  "type": "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)46_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Data)3498_storage": {
              "label": "struct EcdsaDkg.Data",
              "members": [
                {
                  "label": "sortitionPool",
                  "type": "t_contract(SortitionPool)7713",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "dkgValidator",
                  "type": "t_contract(EcdsaDkgValidator)649",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)3472_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "stateLockBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "seed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "resultSubmissionStartBlockOffset",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "submittedResultHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "submittedResultBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)38_storage",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "1632"
            },
            "t_struct(Data)4802_storage": {
              "label": "struct Wallets.Data",
              "members": [
                {
                  "label": "registry",
                  "type": "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)49_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Parameters)2519_storage": {
              "label": "struct EcdsaAuthorization.Parameters",
              "members": [
                {
                  "label": "minimumAuthorization",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseDelay",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseChangePeriod",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Parameters)3472_storage": {
              "label": "struct EcdsaDkg.Parameters",
              "members": [
                {
                  "label": "seedTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "resultChallengePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "resultChallengeExtraGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "resultSubmissionTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submitterPrecedencePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Wallet)4792_storage": {
              "label": "struct Wallets.Wallet",
              "members": [
                {
                  "label": "membersIdsHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicKeyX",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicKeyY",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:39",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "getWalletPublicKey(bytes32)",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:42",
        "version": {
          "withMetadata": "d0daf2be244863b2bd4fdb8c3da6318b9294b8a7137e64f44f6cf0e9ad1681b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:53",
        "version": {
          "withMetadata": "6f6ee0cab2fd85971e8077afef6f1855995cfa0b5ffeb0013aa3b9a06768372c",
          "withoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c",
          "linkedWithoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:43",
        "version": {
          "withMetadata": "121b3da99ae62bd0c7aca743a52ca2c8e990350ccbfcea45b55b95ee58095344",
          "withoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0",
          "linkedWithoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "verifyClaim(address,(bytes32,uint256[],bool,bytes,uint256[]),bytes,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets": {
        "src": "@keep-network/ecdsa/contracts/libraries/Wallets.sol:40",
        "version": {
          "withMetadata": "f4cbe00e94a13dbc7fa06ce7ca426e501fc1edd0698a6462755df6f6c59dc000",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Governable.sol:Governable": {
        "src": "@keep-network/random-beacon/contracts/Governable.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferGovernance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable": {
        "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateReimbursementPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool": {
        "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:48",
        "version": {
          "withMetadata": "d0c5c334a1605f898ae7610b1d06b3e28ac2e9933fafe74f2bc2aee4e653f1a4",
          "withoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2",
          "linkedWithoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "()",
          "refund(uint256,address)",
          "authorize(address)",
          "unauthorize(address)",
          "setStaticGas(uint256)",
          "setMaxGasPrice(uint256)",
          "withdrawAll(address)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReimbursementPool",
            "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "isAuthorized",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:55"
            },
            {
              "label": "staticGas",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:57"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:IRandomBeacon": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestRelayEntry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:27",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:72",
        "version": {
          "withMetadata": "73a66cd6b2b4f71f15c78244cdfe17d5a5bccc2241887339922902ff3b6ef1a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Branch.sol:Branch": {
        "src": "@keep-network/sortition-pools/contracts/Branch.sol:8",
        "version": {
          "withMetadata": "8fb455cf6ab0b1cab36cf7bf6e14a076350f1d0970b14174d38392df089ecc28",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet": {
        "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:8",
        "version": {
          "withMetadata": "e49e66c9d013eab8870a4804cd258742749067d87c78d8ddb800b154fda34fd5",
          "withoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654",
          "linkedWithoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "addBetaOperators(address[])",
          "deactivateChaosnet()",
          "transferChaosnetOwnerRole(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Chaosnet",
            "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isChaosnetActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Constants.sol:Constants": {
        "src": "@keep-network/sortition-pools/contracts/Constants.sol:3",
        "version": {
          "withMetadata": "ec35b91a23fbe90c7a0b0f40e7a8d47a3a43f83250433121642f230eb09dc8e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf": {
        "src": "@keep-network/sortition-pools/contracts/Leaf.sol:5",
        "version": {
          "withMetadata": "8a207d81868067ff6e3916b6dacd4beaf052e3d7a220bc030a150b46dd44a5f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Position.sol:Position": {
        "src": "@keep-network/sortition-pools/contracts/Position.sol:5",
        "version": {
          "withMetadata": "5a1257fee5f756007ea5b501c3cd51fdcaf1afdb587349f92a9022a456c518b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/RNG.sol:RNG": {
        "src": "@keep-network/sortition-pools/contracts/RNG.sol:6",
        "version": {
          "withMetadata": "724ed9f7a4cf16ebb06a838aa9c9412a8cd129ab113f7e1bb6d29ed89a730c5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards": {
        "src": "@keep-network/sortition-pools/contracts/Rewards.sol:29",
        "version": {
          "withMetadata": "da0291a7a9cf48af708faf4199614b92a77cc3f40e5094a84a320342820023bb",
          "withoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25",
          "linkedWithoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ineligibleOffsetStart",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "1",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            }
          ],
          "types": {
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionPool.sol:SortitionPool": {
        "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:17",
        "version": {
          "withMetadata": "9fb55928391a87b8ef87b66191bc0955436413cb417ebf9b52442f2998e121db",
          "withoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168",
          "linkedWithoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168"
        },
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval",
          "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards",
          "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree"
        ],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/RNG.sol:RNG"
        ],
        "methods": [
          "(address,uint256)",
          "receiveApproval(address,uint256,address,bytes)",
          "withdrawRewards(address,address)",
          "withdrawIneligible(address)",
          "lock()",
          "unlock()",
          "insertOperator(address,uint256)",
          "updateOperatorStatus(address,uint256)",
          "setRewardIneligibility(uint32[],uint256)",
          "restoreRewardEligibility(address)",
          "isEligibleForRewards(address)",
          "rewardsEligibilityRestorableAt(address)",
          "canRestoreRewardEligibility(address)",
          "getAvailableRewards(address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "getPoolWeight(address)",
          "selectGroup(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionPool",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolWeightDivisor",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            },
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "9",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "isChaosnetActive",
              "offset": 20,
              "slot": "11",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            },
            {
              "label": "isLocked",
              "offset": 20,
              "slot": "13",
              "type": "t_bool",
              "contract": "SortitionPool",
              "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree": {
        "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:8",
        "version": {
          "withMetadata": "ee73ab4e8ed9253e3bfae0552a70b701c9af6c07326693decd6d17db8b7da901",
          "withoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7",
          "linkedWithoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [
          "()",
          "getOperatorID(address)",
          "getIDOperator(uint32)",
          "getIDOperators(uint32[])",
          "isOperatorRegistered(address)",
          "operatorsInPool()",
          "totalWeight()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionTree",
            "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7834828060f66da0039d30efb993f5f2643830d689ce2cdff803e8bbc308450e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "906cb7f0f5843b27e17df40f0dd37e51fd474892ce29df3caa57f7fc546ad01a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "d56dabd2b65ded96fca818086b2a2fd86ae5f0bda70fbccc2a0eecc15ed15953",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "702cc24e7a5c1d8e4d3a9f406b88de52aca211c426d4604c89a179d27c75ca0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "7f865809d60e93c3efd7b1af4bb15ff776ba9f3c7d1dc7885f79e07cc58f912c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efd3171a58b3b917cd07f35f8c485937fa0a30b212c4893ad6f264c9462a8195",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "6897bf0cdeb3ece2f2c03f8c94ed94150b8823eb184d5db12c18ef333f3fefcf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b0fccc5c954af5dd9623899b14b929d5a8f094ab28d9ba58a8ea4e0d549f4bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ff6c2317c31a63a013d923ab3df84fa78f33ae956c5917a3837aedb7bbcbd1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall": {
        "src": "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:IERC20WithPermit": {
        "src": "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:18",
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "DOMAIN_SEPARATOR()",
          "nonce(address)",
          "PERMIT_TYPEHASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval": {
        "src": "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveApproval(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:32",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "availableRewards(address)",
          "minimumAuthorization()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:IStaking": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,address payable,address,uint96)",
          "stakeKeep(address)",
          "stakeNu(address,address payable,address)",
          "refreshKeepStakeOwner(address)",
          "setMinimumStakeAmount(uint96)",
          "approveApplication(address)",
          "increaseAuthorization(address,address,uint96)",
          "requestAuthorizationDecrease(address,address,uint96)",
          "requestAuthorizationDecrease(address)",
          "approveAuthorizationDecrease(address)",
          "forceDecreaseAuthorization(address,address)",
          "pauseApplication(address)",
          "disableApplication(address)",
          "setPanicButton(address,address)",
          "setAuthorizationCeiling(uint256)",
          "topUp(address,uint96)",
          "topUpKeep(address)",
          "topUpNu(address)",
          "unstakeT(address,uint96)",
          "unstakeKeep(address)",
          "unstakeNu(address,uint96)",
          "unstakeAll(address)",
          "notifyKeepStakeDiscrepancy(address)",
          "notifyNuStakeDiscrepancy(address)",
          "setStakeDiscrepancyPenalty(uint96,uint256)",
          "setNotificationReward(uint96)",
          "pushNotificationReward(uint96)",
          "withdrawNotificationReward(address,uint96)",
          "slash(uint96,address[])",
          "seize(uint96,uint256,address,address[])",
          "processSlashing(uint256)",
          "authorizedStake(address,address)",
          "stakes(address)",
          "getStartStakingTimestamp(address)",
          "stakedNu(address)",
          "rolesOf(address)",
          "getApplicationsLength()",
          "getSlashingQueueLength()",
          "getMinStaked(address,uint8)",
          "getAvailableToAuthorize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bank": {
        "src": "contracts/Main.sol:121",
        "version": {
          "withMetadata": "5b74b5e5410e2286f6132c3584d406d7b2eaad0732ea609133d5e17fa62efb08",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bridge": {
        "src": "contracts/Main.sol:196",
        "version": {
          "withMetadata": "f876d275a0dd0cb1dfb61929e899461d4e149093387c979fb56c113e23f2b92d",
          "withoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2",
          "linkedWithoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "contractReferences()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bridge",
            "src": "contracts/Main.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_bank",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Bank)13221",
              "contract": "Bridge",
              "src": "contracts/Main.sol:197"
            },
            {
              "label": "_relay",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Relay)13222",
              "contract": "Bridge",
              "src": "contracts/Main.sol:198"
            },
            {
              "label": "_ecdsaWalletRegistry",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IWalletRegistry2)13297",
              "contract": "Bridge",
              "src": "contracts/Main.sol:199"
            },
            {
              "label": "_reimbursementPool",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Bridge",
              "src": "contracts/Main.sol:200"
            }
          ],
          "types": {
            "t_contract(Bank)13221": {
              "label": "contract Bank",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13297": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(Relay)13222": {
              "label": "contract Relay",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IMockRandomBaconConsumer": {
        "src": "contracts/Main.sol:90",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IWalletRegistry2": {
        "src": "contracts/Main.sol:184",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address)",
          "updateWalletOwner(address)",
          "requestNewWallet()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Main": {
        "src": "contracts/Main.sol:224",
        "version": {
          "withMetadata": "7f0b48367eea77187c768ad2e6715423061e2eb6dcf137a9979a57cf8922e9ea",
          "withoutMetadata": "cabeeb78520e9e653d48fad1325c7fd00f06863891ffae3049df105e2f7e5291",
          "linkedWithoutMetadata": "cabeeb78520e9e653d48fad1325c7fd00f06863891ffae3049df105e2f7e5291"
        },
        "inherit": [
          "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setWalletRegistry(address)",
          "invokeWallet()",
          "invokeRelay()",
          "heartbeat(bytes20)",
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Main",
            "src": "contracts/Main.sol:235"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "randomBacon",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockRandomBacon)13220",
              "contract": "Main",
              "src": "contracts/Main.sol:225"
            },
            {
              "label": "bridge",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Bridge)13380",
              "contract": "Main",
              "src": "contracts/Main.sol:226"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IStaking)12926",
              "contract": "Main",
              "src": "contracts/Main.sol:227"
            },
            {
              "label": "walletRegistry",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IWalletRegistry2)13297",
              "contract": "Main",
              "src": "contracts/Main.sol:228"
            },
            {
              "label": "walletCoordinator",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(WalletCoordinator)13282",
              "contract": "Main",
              "src": "contracts/Main.sol:229"
            },
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(MockSortitionPool)13132",
              "contract": "Main",
              "src": "contracts/Main.sol:230"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Main",
              "src": "contracts/Main.sol:231"
            },
            {
              "label": "walletID",
              "offset": 0,
              "slot": "7",
              "type": "t_bytes32",
              "contract": "Main",
              "src": "contracts/Main.sol:233"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(Bridge)13380": {
              "label": "contract Bridge",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13297": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(MockRandomBacon)13220": {
              "label": "contract MockRandomBacon",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13132": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(WalletCoordinator)13282": {
              "label": "contract WalletCoordinator",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockRandomBacon": {
        "src": "contracts/Main.sol:95",
        "version": {
          "withMetadata": "78ae301daa54c19fa6046bfd4b883306ea15d7857f7c1084aeba29a64ebce000",
          "withoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898",
          "linkedWithoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "requestRelayEntry(address)",
          "invokeRelay()",
          "operatorToStakingProvider(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockRandomBacon",
            "src": "contracts/Main.sol:101"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/Main.sol:98"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockSortitionPool)13132",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:96"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStaking)12926",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:97"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:98"
            },
            {
              "label": "callback",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IMockRandomBaconConsumer)13153",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:99"
            }
          ],
          "types": {
            "t_contract(IMockRandomBaconConsumer)13153": {
              "label": "contract IMockRandomBaconConsumer",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13132": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockSortitionPool": {
        "src": "contracts/Main.sol:9",
        "version": {
          "withMetadata": "38d08043b77b4cdc9e86a88077a62280941fc4789ecf379e4a3d3217cfa7a25c",
          "withoutMetadata": "720590604f4ad96ed71f9835ce907098db0912ba09fb5f585aa9def474c46be5",
          "linkedWithoutMetadata": "720590604f4ad96ed71f9835ce907098db0912ba09fb5f585aa9def474c46be5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "isEligibleForRewards(address)",
          "lock()",
          "unlock()",
          "selectGroup(uint256,bytes32)",
          "getIDOperators(uint32[])",
          "getIDOperator(uint32)",
          "getOperatorID(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSortitionPool",
            "src": "contracts/Main.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isLocked",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:10"
            },
            {
              "label": "maliciousOp",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:11"
            },
            {
              "label": "honestOp",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockStaking": {
        "src": "contracts/Main.sol:81",
        "version": {
          "withMetadata": "70613b00213d4ab0f67955648bab99971dc7cdea143bcf74197fa1744a90139f",
          "withoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b",
          "linkedWithoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "authorizedStake(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Relay": {
        "src": "contracts/Main.sol:125",
        "version": {
          "withMetadata": "5b56391a78a0ea4ec5921a386fb30c7b352979f0aa2414a6e2e938e4640bbc62",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:StakingProvider": {
        "src": "contracts/Main.sol:190",
        "version": {
          "withMetadata": "aa65947807106ff76cf3b5cb372560fdbe4eb35403fc98d13026a8576030730a",
          "withoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3",
          "linkedWithoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:WalletCoordinator": {
        "src": "contracts/Main.sol:131",
        "version": {
          "withMetadata": "6e0cdda68b966b22c71afc2a1e6ab8153136dec741c0214185ed7fe2f7802bce",
          "withoutMetadata": "94c544a8dbd84b3d42c4c95f58dfb1f8109e398962c8ae822b5cfd97295e0c8a",
          "linkedWithoutMetadata": "94c544a8dbd84b3d42c4c95f58dfb1f8109e398962c8ae822b5cfd97295e0c8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestHeartbeat(bytes20,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "walletLock",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes20,t_struct(WalletLock)13237_storage)",
              "contract": "WalletCoordinator",
              "src": "contracts/Main.sol:158"
            }
          ],
          "types": {
            "t_bytes20": {
              "label": "bytes20",
              "numberOfBytes": "20"
            },
            "t_enum(WalletAction)13229": {
              "label": "enum WalletCoordinator.WalletAction",
              "members": [
                "Idle",
                "Heartbeat",
                "DepositSweep",
                "Redemption",
                "MovingFunds",
                "MovedFundsSweep"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes20,t_struct(WalletLock)13237_storage)": {
              "label": "mapping(bytes20 => struct WalletCoordinator.WalletLock)",
              "numberOfBytes": "32"
            },
            "t_struct(WalletLock)13237_storage": {
              "label": "struct WalletCoordinator.WalletLock",
              "members": [
                {
                  "label": "expiresAt",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cause",
                  "type": "t_enum(WalletAction)13229",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:EcdsaDkgValidator": {
        "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:61",
        "version": {
          "withMetadata": "c0033e1c5d8103ec670c9b8aa4182846942a4e925173551b59feb7353515bb92",
          "withoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573",
          "linkedWithoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address)",
          "validate((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256,uint256)",
          "validateFields((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "validateGroupMembers((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateSignatures((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateMembersHash((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EcdsaDkgValidator",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:94"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sortitionPool",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/WalletRegistry.sol:WalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:64",
        "version": {
          "withMetadata": "293b66225bd2fc211b894cef0c6e654d14ca3c074e8311062a3fb17b1a5665aa",
          "withoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690",
          "linkedWithoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable",
          "@keep-network/random-beacon/contracts/Governable.sol:Governable",
          "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication",
          "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer",
          "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry"
        ],
        "libraries": [
          "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization",
          "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg",
          "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets",
          "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity"
        ],
        "methods": [
          "(address,address)",
          "initialize(address,address,address)",
          "withdrawRewards(address)",
          "withdrawIneligibleRewards(address)",
          "registerOperator(address)",
          "joinSortitionPool()",
          "updateOperatorStatus(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "approveAuthorizationDecrease(address)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "upgradeRandomBeacon(address)",
          "updateWalletOwner(address)",
          "updateAuthorizationParameters(uint96,uint64,uint64)",
          "updateDkgParameters(uint256,uint256,uint256,uint256,uint256)",
          "updateRewardParameters(uint256,uint256)",
          "updateSlashingParameters(uint96)",
          "updateGasParameters(uint256,uint256,uint256,uint256,uint256)",
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "__beaconCallback(uint256,uint256)",
          "submitDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "approveDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifySeedTimeout()",
          "notifyDkgTimeout()",
          "challengeDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifyOperatorInactivity((bytes32,uint256[],bool,bytes,uint256[]),uint256,uint32[])",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "isDkgResultValid((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)",
          "hasSeedTimedOut()",
          "hasDkgTimedOut()",
          "getWallet(bytes32)",
          "getWalletPublicKey(bytes32)",
          "isWalletRegistered(bytes32)",
          "minimumAuthorization()",
          "eligibleStake(address)",
          "availableRewards(address)",
          "pendingAuthorizationDecrease(address)",
          "remainingAuthorizationDecreaseDelay(address)",
          "stakingProviderToOperator(address)",
          "operatorToStakingProvider(address)",
          "isOperatorUpToDate(address)",
          "isOperatorInPool(address)",
          "selectGroup()",
          "dkgParameters()",
          "authorizationParameters()",
          "rewardParameters()",
          "slashingParameters()",
          "gasParameters()"
        ],
        "linkReferences": [
          {
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol",
            "name": "EcdsaInactivity",
            "length": 20,
            "start": 6842,
            "placeholder": "__$c28dd63714b1a086d50ecbb702fff9dbb7$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "EcdsaInactivity",
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "100",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "100",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "authorization",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Data)2545_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "dkg",
              "offset": 0,
              "slot": "151",
              "type": "t_struct(Data)3498_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "202",
              "type": "t_struct(Data)4802_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:71"
            },
            {
              "label": "_maliciousDkgResultSlashingAmount",
              "offset": 0,
              "slot": "252",
              "type": "t_uint96",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:78"
            },
            {
              "label": "_maliciousDkgResultNotificationRewardMultiplier",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:88"
            },
            {
              "label": "_sortitionPoolRewardsBanDuration",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:93"
            },
            {
              "label": "_dkgResultSubmissionGas",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:101"
            },
            {
              "label": "_dkgResultApprovalGasOffset",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:106"
            },
            {
              "label": "_notifyOperatorInactivityGasOffset",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:111"
            },
            {
              "label": "_notifySeedTimeoutGasOffset",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:118"
            },
            {
              "label": "_notifyDkgTimeoutNegativeGasOffset",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:135"
            },
            {
              "label": "inactivityClaimNonce",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:149"
            },
            {
              "label": "walletOwner",
              "offset": 0,
              "slot": "261",
              "type": "t_contract(IWalletOwner)2448",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:158"
            },
            {
              "label": "randomBeacon",
              "offset": 0,
              "slot": "262",
              "type": "t_contract(IRandomBeacon)5484",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:169"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)38_storage": {
              "label": "uint256[38]",
              "numberOfBytes": "1216"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EcdsaDkgValidator)649": {
              "label": "contract EcdsaDkgValidator",
              "numberOfBytes": "20"
            },
            "t_contract(IRandomBeacon)5484": {
              "label": "contract IRandomBeacon",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletOwner)2448": {
              "label": "contract IWalletOwner",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(SortitionPool)7713": {
              "label": "contract SortitionPool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)": {
              "label": "mapping(address => struct EcdsaAuthorization.AuthorizationDecrease)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)": {
              "label": "mapping(bytes32 => struct Wallets.Wallet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AuthorizationDecrease)2524_storage": {
              "label": "struct EcdsaAuthorization.AuthorizationDecrease",
              "members": [
                {
                  "label": "decreasingBy",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "decreasingAt",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Data)2545_storage": {
              "label": "struct EcdsaAuthorization.Data",
              "members": [
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)2519_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingProviderToOperator",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "operatorToStakingProvider",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pendingDecreases",
                  "type": "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)46_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Data)3498_storage": {
              "label": "struct EcdsaDkg.Data",
              "members": [
                {
                  "label": "sortitionPool",
                  "type": "t_contract(SortitionPool)7713",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "dkgValidator",
                  "type": "t_contract(EcdsaDkgValidator)649",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)3472_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "stateLockBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "seed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "resultSubmissionStartBlockOffset",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "submittedResultHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "submittedResultBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)38_storage",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "1632"
            },
            "t_struct(Data)4802_storage": {
              "label": "struct Wallets.Data",
              "members": [
                {
                  "label": "registry",
                  "type": "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)49_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Parameters)2519_storage": {
              "label": "struct EcdsaAuthorization.Parameters",
              "members": [
                {
                  "label": "minimumAuthorization",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseDelay",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseChangePeriod",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Parameters)3472_storage": {
              "label": "struct EcdsaDkg.Parameters",
              "members": [
                {
                  "label": "seedTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "resultChallengePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "resultChallengeExtraGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "resultSubmissionTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submitterPrecedencePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Wallet)4792_storage": {
              "label": "struct Wallets.Wallet",
              "members": [
                {
                  "label": "membersIdsHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicKeyX",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicKeyY",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:39",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "getWalletPublicKey(bytes32)",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:42",
        "version": {
          "withMetadata": "d0daf2be244863b2bd4fdb8c3da6318b9294b8a7137e64f44f6cf0e9ad1681b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:53",
        "version": {
          "withMetadata": "6f6ee0cab2fd85971e8077afef6f1855995cfa0b5ffeb0013aa3b9a06768372c",
          "withoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c",
          "linkedWithoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:43",
        "version": {
          "withMetadata": "121b3da99ae62bd0c7aca743a52ca2c8e990350ccbfcea45b55b95ee58095344",
          "withoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0",
          "linkedWithoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "verifyClaim(address,(bytes32,uint256[],bool,bytes,uint256[]),bytes,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets": {
        "src": "@keep-network/ecdsa/contracts/libraries/Wallets.sol:40",
        "version": {
          "withMetadata": "f4cbe00e94a13dbc7fa06ce7ca426e501fc1edd0698a6462755df6f6c59dc000",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Governable.sol:Governable": {
        "src": "@keep-network/random-beacon/contracts/Governable.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferGovernance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable": {
        "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateReimbursementPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool": {
        "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:48",
        "version": {
          "withMetadata": "d0c5c334a1605f898ae7610b1d06b3e28ac2e9933fafe74f2bc2aee4e653f1a4",
          "withoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2",
          "linkedWithoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "()",
          "refund(uint256,address)",
          "authorize(address)",
          "unauthorize(address)",
          "setStaticGas(uint256)",
          "setMaxGasPrice(uint256)",
          "withdrawAll(address)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReimbursementPool",
            "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "isAuthorized",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:55"
            },
            {
              "label": "staticGas",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:57"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:IRandomBeacon": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestRelayEntry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:27",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:72",
        "version": {
          "withMetadata": "73a66cd6b2b4f71f15c78244cdfe17d5a5bccc2241887339922902ff3b6ef1a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Branch.sol:Branch": {
        "src": "@keep-network/sortition-pools/contracts/Branch.sol:8",
        "version": {
          "withMetadata": "8fb455cf6ab0b1cab36cf7bf6e14a076350f1d0970b14174d38392df089ecc28",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet": {
        "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:8",
        "version": {
          "withMetadata": "e49e66c9d013eab8870a4804cd258742749067d87c78d8ddb800b154fda34fd5",
          "withoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654",
          "linkedWithoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "addBetaOperators(address[])",
          "deactivateChaosnet()",
          "transferChaosnetOwnerRole(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Chaosnet",
            "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isChaosnetActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Constants.sol:Constants": {
        "src": "@keep-network/sortition-pools/contracts/Constants.sol:3",
        "version": {
          "withMetadata": "ec35b91a23fbe90c7a0b0f40e7a8d47a3a43f83250433121642f230eb09dc8e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf": {
        "src": "@keep-network/sortition-pools/contracts/Leaf.sol:5",
        "version": {
          "withMetadata": "8a207d81868067ff6e3916b6dacd4beaf052e3d7a220bc030a150b46dd44a5f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Position.sol:Position": {
        "src": "@keep-network/sortition-pools/contracts/Position.sol:5",
        "version": {
          "withMetadata": "5a1257fee5f756007ea5b501c3cd51fdcaf1afdb587349f92a9022a456c518b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/RNG.sol:RNG": {
        "src": "@keep-network/sortition-pools/contracts/RNG.sol:6",
        "version": {
          "withMetadata": "724ed9f7a4cf16ebb06a838aa9c9412a8cd129ab113f7e1bb6d29ed89a730c5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards": {
        "src": "@keep-network/sortition-pools/contracts/Rewards.sol:29",
        "version": {
          "withMetadata": "da0291a7a9cf48af708faf4199614b92a77cc3f40e5094a84a320342820023bb",
          "withoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25",
          "linkedWithoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ineligibleOffsetStart",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "1",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            }
          ],
          "types": {
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionPool.sol:SortitionPool": {
        "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:17",
        "version": {
          "withMetadata": "9fb55928391a87b8ef87b66191bc0955436413cb417ebf9b52442f2998e121db",
          "withoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168",
          "linkedWithoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168"
        },
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval",
          "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards",
          "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree"
        ],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/RNG.sol:RNG"
        ],
        "methods": [
          "(address,uint256)",
          "receiveApproval(address,uint256,address,bytes)",
          "withdrawRewards(address,address)",
          "withdrawIneligible(address)",
          "lock()",
          "unlock()",
          "insertOperator(address,uint256)",
          "updateOperatorStatus(address,uint256)",
          "setRewardIneligibility(uint32[],uint256)",
          "restoreRewardEligibility(address)",
          "isEligibleForRewards(address)",
          "rewardsEligibilityRestorableAt(address)",
          "canRestoreRewardEligibility(address)",
          "getAvailableRewards(address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "getPoolWeight(address)",
          "selectGroup(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionPool",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolWeightDivisor",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            },
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "9",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "isChaosnetActive",
              "offset": 20,
              "slot": "11",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            },
            {
              "label": "isLocked",
              "offset": 20,
              "slot": "13",
              "type": "t_bool",
              "contract": "SortitionPool",
              "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree": {
        "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:8",
        "version": {
          "withMetadata": "ee73ab4e8ed9253e3bfae0552a70b701c9af6c07326693decd6d17db8b7da901",
          "withoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7",
          "linkedWithoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [
          "()",
          "getOperatorID(address)",
          "getIDOperator(uint32)",
          "getIDOperators(uint32[])",
          "isOperatorRegistered(address)",
          "operatorsInPool()",
          "totalWeight()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionTree",
            "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7834828060f66da0039d30efb993f5f2643830d689ce2cdff803e8bbc308450e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "906cb7f0f5843b27e17df40f0dd37e51fd474892ce29df3caa57f7fc546ad01a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "d56dabd2b65ded96fca818086b2a2fd86ae5f0bda70fbccc2a0eecc15ed15953",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "702cc24e7a5c1d8e4d3a9f406b88de52aca211c426d4604c89a179d27c75ca0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "7f865809d60e93c3efd7b1af4bb15ff776ba9f3c7d1dc7885f79e07cc58f912c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efd3171a58b3b917cd07f35f8c485937fa0a30b212c4893ad6f264c9462a8195",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "6897bf0cdeb3ece2f2c03f8c94ed94150b8823eb184d5db12c18ef333f3fefcf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b0fccc5c954af5dd9623899b14b929d5a8f094ab28d9ba58a8ea4e0d549f4bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ff6c2317c31a63a013d923ab3df84fa78f33ae956c5917a3837aedb7bbcbd1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall": {
        "src": "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:IERC20WithPermit": {
        "src": "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:18",
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "DOMAIN_SEPARATOR()",
          "nonce(address)",
          "PERMIT_TYPEHASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval": {
        "src": "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveApproval(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:32",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "availableRewards(address)",
          "minimumAuthorization()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:IStaking": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,address payable,address,uint96)",
          "stakeKeep(address)",
          "stakeNu(address,address payable,address)",
          "refreshKeepStakeOwner(address)",
          "setMinimumStakeAmount(uint96)",
          "approveApplication(address)",
          "increaseAuthorization(address,address,uint96)",
          "requestAuthorizationDecrease(address,address,uint96)",
          "requestAuthorizationDecrease(address)",
          "approveAuthorizationDecrease(address)",
          "forceDecreaseAuthorization(address,address)",
          "pauseApplication(address)",
          "disableApplication(address)",
          "setPanicButton(address,address)",
          "setAuthorizationCeiling(uint256)",
          "topUp(address,uint96)",
          "topUpKeep(address)",
          "topUpNu(address)",
          "unstakeT(address,uint96)",
          "unstakeKeep(address)",
          "unstakeNu(address,uint96)",
          "unstakeAll(address)",
          "notifyKeepStakeDiscrepancy(address)",
          "notifyNuStakeDiscrepancy(address)",
          "setStakeDiscrepancyPenalty(uint96,uint256)",
          "setNotificationReward(uint96)",
          "pushNotificationReward(uint96)",
          "withdrawNotificationReward(address,uint96)",
          "slash(uint96,address[])",
          "seize(uint96,uint256,address,address[])",
          "processSlashing(uint256)",
          "authorizedStake(address,address)",
          "stakes(address)",
          "getStartStakingTimestamp(address)",
          "stakedNu(address)",
          "rolesOf(address)",
          "getApplicationsLength()",
          "getSlashingQueueLength()",
          "getMinStaked(address,uint8)",
          "getAvailableToAuthorize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bank": {
        "src": "contracts/Main.sol:117",
        "version": {
          "withMetadata": "f7e1308627e0f8ff5b05a33efc17dd1e5f8624c733c1a5d45569161d9a1547bd",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bridge": {
        "src": "contracts/Main.sol:143",
        "version": {
          "withMetadata": "cd654add8a64eb605305d6e422dc9ea7834f433bd19cf41cfd0f7d5391d468e3",
          "withoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2",
          "linkedWithoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "contractReferences()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bridge",
            "src": "contracts/Main.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_bank",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Bank)13206",
              "contract": "Bridge",
              "src": "contracts/Main.sol:144"
            },
            {
              "label": "_relay",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Relay)13207",
              "contract": "Bridge",
              "src": "contracts/Main.sol:145"
            },
            {
              "label": "_ecdsaWalletRegistry",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IWalletRegistry2)13223",
              "contract": "Bridge",
              "src": "contracts/Main.sol:146"
            },
            {
              "label": "_reimbursementPool",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Bridge",
              "src": "contracts/Main.sol:147"
            }
          ],
          "types": {
            "t_contract(Bank)13206": {
              "label": "contract Bank",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13223": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(Relay)13207": {
              "label": "contract Relay",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IMockRandomBaconConsumer": {
        "src": "contracts/Main.sol:86",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IWalletRegistry2": {
        "src": "contracts/Main.sol:131",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address)",
          "updateWalletOwner(address)",
          "requestNewWallet()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Main": {
        "src": "contracts/Main.sol:171",
        "version": {
          "withMetadata": "02fb2f03924145bf5e5dc8ef24607083346f4cb4e96b81054e90f51aca6f7693",
          "withoutMetadata": "bd167d16ef6b70cc2c72a476866a75350929bf4b1497c66f7cd9e286b9b22070",
          "linkedWithoutMetadata": "bd167d16ef6b70cc2c72a476866a75350929bf4b1497c66f7cd9e286b9b22070"
        },
        "inherit": [
          "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setWalletRegistry(address)",
          "invokeWallet()",
          "invokeRelay()",
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Main",
            "src": "contracts/Main.sol:182"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "randomBacon",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockRandomBacon)13205",
              "contract": "Main",
              "src": "contracts/Main.sol:172"
            },
            {
              "label": "bridge",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Bridge)13306",
              "contract": "Main",
              "src": "contracts/Main.sol:173"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IStaking)12926",
              "contract": "Main",
              "src": "contracts/Main.sol:174"
            },
            {
              "label": "walletRegistry",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IWalletRegistry2)13223",
              "contract": "Main",
              "src": "contracts/Main.sol:175"
            },
            {
              "label": "walletCoordinator",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(WalletCoordinator)13208",
              "contract": "Main",
              "src": "contracts/Main.sol:176"
            },
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(MockSortitionPool)13117",
              "contract": "Main",
              "src": "contracts/Main.sol:177"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Main",
              "src": "contracts/Main.sol:178"
            },
            {
              "label": "walletID",
              "offset": 0,
              "slot": "7",
              "type": "t_bytes32",
              "contract": "Main",
              "src": "contracts/Main.sol:180"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(Bridge)13306": {
              "label": "contract Bridge",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13223": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(MockRandomBacon)13205": {
              "label": "contract MockRandomBacon",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13117": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(WalletCoordinator)13208": {
              "label": "contract WalletCoordinator",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockRandomBacon": {
        "src": "contracts/Main.sol:91",
        "version": {
          "withMetadata": "f7eebfb75290a89cabdf39141dc9bcd81072931e633d44bfe7b332ce4b0ac86c",
          "withoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898",
          "linkedWithoutMetadata": "d729b66da173ec16b5366907616e40ed55f03e4fbdb832326f162de55b41d898"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "requestRelayEntry(address)",
          "invokeRelay()",
          "operatorToStakingProvider(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockRandomBacon",
            "src": "contracts/Main.sol:97"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/Main.sol:94"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockSortitionPool)13117",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:92"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStaking)12926",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:93"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:94"
            },
            {
              "label": "callback",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IMockRandomBaconConsumer)13138",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:95"
            }
          ],
          "types": {
            "t_contract(IMockRandomBaconConsumer)13138": {
              "label": "contract IMockRandomBaconConsumer",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13117": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockSortitionPool": {
        "src": "contracts/Main.sol:9",
        "version": {
          "withMetadata": "687d6d23a33f0ea6a836802ca73bfd5deb523b4c1e59bed79174071abb12ed81",
          "withoutMetadata": "a04f7f89fa41a819d0cf82b56cb8b2705179d0ccab834eb9a9d0d62aa35a0e8d",
          "linkedWithoutMetadata": "a04f7f89fa41a819d0cf82b56cb8b2705179d0ccab834eb9a9d0d62aa35a0e8d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "isEligibleForRewards(address)",
          "lock()",
          "unlock()",
          "selectGroup(uint256,bytes32)",
          "getIDOperators(uint32[])",
          "getIDOperator(uint32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSortitionPool",
            "src": "contracts/Main.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isLocked",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:10"
            },
            {
              "label": "maliciousOp",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:11"
            },
            {
              "label": "honestOp",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockStaking": {
        "src": "contracts/Main.sol:77",
        "version": {
          "withMetadata": "e231b45bdfff60ee0f6efa8700b8320a81f3fa9189b795503cb9c53bae2823ae",
          "withoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b",
          "linkedWithoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "authorizedStake(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Relay": {
        "src": "contracts/Main.sol:121",
        "version": {
          "withMetadata": "55f7aeede8c268b303d3dcde64ad0cddb6c367937ce24cc73fa9aba6d0430e77",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:StakingProvider": {
        "src": "contracts/Main.sol:137",
        "version": {
          "withMetadata": "9fbcdcd6dbe8d302e50c9a9fa2b73ab2168b9dafc90a21f256fbc555647b9a72",
          "withoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3",
          "linkedWithoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:WalletCoordinator": {
        "src": "contracts/Main.sol:127",
        "version": {
          "withMetadata": "320108e03e5dead5bbb3451e5319772cae9b2f2df24adf77c124aa1b95c81805",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:EcdsaDkgValidator": {
        "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:61",
        "version": {
          "withMetadata": "c0033e1c5d8103ec670c9b8aa4182846942a4e925173551b59feb7353515bb92",
          "withoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573",
          "linkedWithoutMetadata": "196df0600a281a74a0589e44fcabd43df098c32ad2a3aa872c1b8b58c3ee8573"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address)",
          "validate((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256,uint256)",
          "validateFields((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "validateGroupMembers((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateSignatures((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateMembersHash((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EcdsaDkgValidator",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:94"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sortitionPool",
            "src": "@keep-network/ecdsa/contracts/EcdsaDkgValidator.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/WalletRegistry.sol:WalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:64",
        "version": {
          "withMetadata": "293b66225bd2fc211b894cef0c6e654d14ca3c074e8311062a3fb17b1a5665aa",
          "withoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690",
          "linkedWithoutMetadata": "496a508f52aa12a2822c2438f37ea944b21125b3a270e9d9160e650a16900690"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable",
          "@keep-network/random-beacon/contracts/Governable.sol:Governable",
          "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication",
          "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer",
          "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry"
        ],
        "libraries": [
          "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization",
          "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg",
          "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets",
          "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity"
        ],
        "methods": [
          "(address,address)",
          "initialize(address,address,address)",
          "withdrawRewards(address)",
          "withdrawIneligibleRewards(address)",
          "registerOperator(address)",
          "joinSortitionPool()",
          "updateOperatorStatus(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "approveAuthorizationDecrease(address)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "upgradeRandomBeacon(address)",
          "updateWalletOwner(address)",
          "updateAuthorizationParameters(uint96,uint64,uint64)",
          "updateDkgParameters(uint256,uint256,uint256,uint256,uint256)",
          "updateRewardParameters(uint256,uint256)",
          "updateSlashingParameters(uint96)",
          "updateGasParameters(uint256,uint256,uint256,uint256,uint256)",
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "__beaconCallback(uint256,uint256)",
          "submitDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "approveDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifySeedTimeout()",
          "notifyDkgTimeout()",
          "challengeDkgResult((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "notifyOperatorInactivity((bytes32,uint256[],bool,bytes,uint256[]),uint256,uint32[])",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "isDkgResultValid((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)",
          "hasSeedTimedOut()",
          "hasDkgTimedOut()",
          "getWallet(bytes32)",
          "getWalletPublicKey(bytes32)",
          "isWalletRegistered(bytes32)",
          "minimumAuthorization()",
          "eligibleStake(address)",
          "availableRewards(address)",
          "pendingAuthorizationDecrease(address)",
          "remainingAuthorizationDecreaseDelay(address)",
          "stakingProviderToOperator(address)",
          "operatorToStakingProvider(address)",
          "isOperatorUpToDate(address)",
          "isOperatorInPool(address)",
          "selectGroup()",
          "dkgParameters()",
          "authorizationParameters()",
          "rewardParameters()",
          "slashingParameters()",
          "gasParameters()"
        ],
        "linkReferences": [
          {
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol",
            "name": "EcdsaInactivity",
            "length": 20,
            "start": 6842,
            "placeholder": "__$c28dd63714b1a086d50ecbb702fff9dbb7$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "EcdsaInactivity",
            "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "100",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "100",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "authorization",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Data)2545_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "dkg",
              "offset": 0,
              "slot": "151",
              "type": "t_struct(Data)3498_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:69"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "202",
              "type": "t_struct(Data)4802_storage",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:71"
            },
            {
              "label": "_maliciousDkgResultSlashingAmount",
              "offset": 0,
              "slot": "252",
              "type": "t_uint96",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:78"
            },
            {
              "label": "_maliciousDkgResultNotificationRewardMultiplier",
              "offset": 0,
              "slot": "253",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:88"
            },
            {
              "label": "_sortitionPoolRewardsBanDuration",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:93"
            },
            {
              "label": "_dkgResultSubmissionGas",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:101"
            },
            {
              "label": "_dkgResultApprovalGasOffset",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:106"
            },
            {
              "label": "_notifyOperatorInactivityGasOffset",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:111"
            },
            {
              "label": "_notifySeedTimeoutGasOffset",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:118"
            },
            {
              "label": "_notifyDkgTimeoutNegativeGasOffset",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:135"
            },
            {
              "label": "inactivityClaimNonce",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:149"
            },
            {
              "label": "walletOwner",
              "offset": 0,
              "slot": "261",
              "type": "t_contract(IWalletOwner)2448",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:158"
            },
            {
              "label": "randomBeacon",
              "offset": 0,
              "slot": "262",
              "type": "t_contract(IRandomBeacon)5484",
              "contract": "WalletRegistry",
              "src": "@keep-network/ecdsa/contracts/WalletRegistry.sol:169"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)38_storage": {
              "label": "uint256[38]",
              "numberOfBytes": "1216"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EcdsaDkgValidator)649": {
              "label": "contract EcdsaDkgValidator",
              "numberOfBytes": "20"
            },
            "t_contract(IRandomBeacon)5484": {
              "label": "contract IRandomBeacon",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletOwner)2448": {
              "label": "contract IWalletOwner",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(SortitionPool)7713": {
              "label": "contract SortitionPool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)": {
              "label": "mapping(address => struct EcdsaAuthorization.AuthorizationDecrease)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)": {
              "label": "mapping(bytes32 => struct Wallets.Wallet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AuthorizationDecrease)2524_storage": {
              "label": "struct EcdsaAuthorization.AuthorizationDecrease",
              "members": [
                {
                  "label": "decreasingBy",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "decreasingAt",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Data)2545_storage": {
              "label": "struct EcdsaAuthorization.Data",
              "members": [
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)2519_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingProviderToOperator",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "operatorToStakingProvider",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pendingDecreases",
                  "type": "t_mapping(t_address,t_struct(AuthorizationDecrease)2524_storage)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)46_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Data)3498_storage": {
              "label": "struct EcdsaDkg.Data",
              "members": [
                {
                  "label": "sortitionPool",
                  "type": "t_contract(SortitionPool)7713",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "dkgValidator",
                  "type": "t_contract(EcdsaDkgValidator)649",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "parameters",
                  "type": "t_struct(Parameters)3472_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "stateLockBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "seed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "resultSubmissionStartBlockOffset",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "submittedResultHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "submittedResultBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)38_storage",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "1632"
            },
            "t_struct(Data)4802_storage": {
              "label": "struct Wallets.Data",
              "members": [
                {
                  "label": "registry",
                  "type": "t_mapping(t_bytes32,t_struct(Wallet)4792_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "__gap",
                  "type": "t_array(t_uint256)49_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "1600"
            },
            "t_struct(Parameters)2519_storage": {
              "label": "struct EcdsaAuthorization.Parameters",
              "members": [
                {
                  "label": "minimumAuthorization",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseDelay",
                  "type": "t_uint64",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "authorizationDecreaseChangePeriod",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Parameters)3472_storage": {
              "label": "struct EcdsaDkg.Parameters",
              "members": [
                {
                  "label": "seedTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "resultChallengePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "resultChallengeExtraGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "resultSubmissionTimeout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submitterPrecedencePeriodLength",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Wallet)4792_storage": {
              "label": "struct Wallets.Wallet",
              "members": [
                {
                  "label": "membersIdsHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicKeyX",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicKeyY",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:IWalletRegistry": {
        "src": "@keep-network/ecdsa/contracts/api/IWalletRegistry.sol:39",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestNewWallet()",
          "closeWallet(bytes32)",
          "seize(uint96,uint256,address,bytes32,uint32[])",
          "getWalletPublicKey(bytes32)",
          "getWalletCreationState()",
          "isWalletMember(bytes32,uint32[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:EcdsaAuthorization": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaAuthorization.sol:42",
        "version": {
          "withMetadata": "d0daf2be244863b2bd4fdb8c3da6318b9294b8a7137e64f44f6cf0e9ad1681b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:EcdsaDkg": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaDkg.sol:53",
        "version": {
          "withMetadata": "6f6ee0cab2fd85971e8077afef6f1855995cfa0b5ffeb0013aa3b9a06768372c",
          "withoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c",
          "linkedWithoutMetadata": "879f23778ac038d6a1dcac4ebbc3f6cdf27e8383121228927e0e909e8e91356c"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:EcdsaInactivity": {
        "src": "@keep-network/ecdsa/contracts/libraries/EcdsaInactivity.sol:43",
        "version": {
          "withMetadata": "121b3da99ae62bd0c7aca743a52ca2c8e990350ccbfcea45b55b95ee58095344",
          "withoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0",
          "linkedWithoutMetadata": "1c2a57f6542e55cd7ff6956b8daa1218fc72e3e88ca5766e6ae5276286a03ce0"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "verifyClaim(address,(bytes32,uint256[],bool,bytes,uint256[]),bytes,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/ecdsa/contracts/libraries/Wallets.sol:Wallets": {
        "src": "@keep-network/ecdsa/contracts/libraries/Wallets.sol:40",
        "version": {
          "withMetadata": "f4cbe00e94a13dbc7fa06ce7ca426e501fc1edd0698a6462755df6f6c59dc000",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Governable.sol:Governable": {
        "src": "@keep-network/random-beacon/contracts/Governable.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferGovernance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "governance",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:56"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Governable",
              "src": "@keep-network/random-beacon/contracts/Governable.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable": {
        "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateReimbursementPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Reimbursable",
              "src": "@keep-network/random-beacon/contracts/Reimbursable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool": {
        "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:48",
        "version": {
          "withMetadata": "d0c5c334a1605f898ae7610b1d06b3e28ac2e9933fafe74f2bc2aee4e653f1a4",
          "withoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2",
          "linkedWithoutMetadata": "5886b802a5c0d698e5867a45acfc23a706b29e645a50fac7a3525b7fc90be1d2"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "()",
          "refund(uint256,address)",
          "authorize(address)",
          "unauthorize(address)",
          "setStaticGas(uint256)",
          "setMaxGasPrice(uint256)",
          "withdrawAll(address)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReimbursementPool",
            "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "isAuthorized",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:55"
            },
            {
              "label": "staticGas",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:57"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReimbursementPool",
              "src": "@keep-network/random-beacon/contracts/ReimbursementPool.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:IRandomBeacon": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeacon.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestRelayEntry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:IRandomBeaconConsumer": {
        "src": "@keep-network/random-beacon/contracts/api/IRandomBeaconConsumer.sol:27",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:72",
        "version": {
          "withMetadata": "73a66cd6b2b4f71f15c78244cdfe17d5a5bccc2241887339922902ff3b6ef1a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Branch.sol:Branch": {
        "src": "@keep-network/sortition-pools/contracts/Branch.sol:8",
        "version": {
          "withMetadata": "8fb455cf6ab0b1cab36cf7bf6e14a076350f1d0970b14174d38392df089ecc28",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet": {
        "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:8",
        "version": {
          "withMetadata": "e49e66c9d013eab8870a4804cd258742749067d87c78d8ddb800b154fda34fd5",
          "withoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654",
          "linkedWithoutMetadata": "455bbd871475c4d95e96cc07317de352880deb4a881efd152fb399b9da147654"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "addBetaOperators(address[])",
          "deactivateChaosnet()",
          "transferChaosnetOwnerRole(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Chaosnet",
            "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isChaosnetActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Constants.sol:Constants": {
        "src": "@keep-network/sortition-pools/contracts/Constants.sol:3",
        "version": {
          "withMetadata": "ec35b91a23fbe90c7a0b0f40e7a8d47a3a43f83250433121642f230eb09dc8e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf": {
        "src": "@keep-network/sortition-pools/contracts/Leaf.sol:5",
        "version": {
          "withMetadata": "8a207d81868067ff6e3916b6dacd4beaf052e3d7a220bc030a150b46dd44a5f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Position.sol:Position": {
        "src": "@keep-network/sortition-pools/contracts/Position.sol:5",
        "version": {
          "withMetadata": "5a1257fee5f756007ea5b501c3cd51fdcaf1afdb587349f92a9022a456c518b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/RNG.sol:RNG": {
        "src": "@keep-network/sortition-pools/contracts/RNG.sol:6",
        "version": {
          "withMetadata": "724ed9f7a4cf16ebb06a838aa9c9412a8cd129ab113f7e1bb6d29ed89a730c5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards": {
        "src": "@keep-network/sortition-pools/contracts/Rewards.sol:29",
        "version": {
          "withMetadata": "da0291a7a9cf48af708faf4199614b92a77cc3f40e5094a84a320342820023bb",
          "withoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25",
          "linkedWithoutMetadata": "55de178c58b19f84bd9c63fc61893b2606d81c5f9dba21d43f53c3d5ea0a9c25"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ineligibleOffsetStart",
            "src": "@keep-network/sortition-pools/contracts/Rewards.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "0",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "1",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            }
          ],
          "types": {
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionPool.sol:SortitionPool": {
        "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:17",
        "version": {
          "withMetadata": "9fb55928391a87b8ef87b66191bc0955436413cb417ebf9b52442f2998e121db",
          "withoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168",
          "linkedWithoutMetadata": "2ee22f442ff55bef7b0a88e18166f2bc4bb3ccd9bdfb2af914ab8b8829fd3168"
        },
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval",
          "@keep-network/sortition-pools/contracts/Chaosnet.sol:Chaosnet",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@keep-network/sortition-pools/contracts/Rewards.sol:Rewards",
          "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree"
        ],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/RNG.sol:RNG"
        ],
        "methods": [
          "(address,uint256)",
          "receiveApproval(address,uint256,address,bytes)",
          "withdrawRewards(address,address)",
          "withdrawIneligible(address)",
          "lock()",
          "unlock()",
          "insertOperator(address,uint256)",
          "updateOperatorStatus(address,uint256)",
          "setRewardIneligibility(uint32[],uint256)",
          "restoreRewardEligibility(address)",
          "isEligibleForRewards(address)",
          "rewardsEligibilityRestorableAt(address)",
          "canRestoreRewardEligibility(address)",
          "getAvailableRewards(address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "getPoolWeight(address)",
          "selectGroup(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionPool",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolWeightDivisor",
            "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            },
            {
              "label": "globalRewardAccumulator",
              "offset": 0,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:52"
            },
            {
              "label": "rewardRoundingDust",
              "offset": 12,
              "slot": "8",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:57"
            },
            {
              "label": "ineligibleEarnedRewards",
              "offset": 0,
              "slot": "9",
              "type": "t_uint96",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:61"
            },
            {
              "label": "operatorRewards",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)",
              "contract": "Rewards",
              "src": "@keep-network/sortition-pools/contracts/Rewards.sol:67"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "isChaosnetActive",
              "offset": 20,
              "slot": "11",
              "type": "t_bool",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:13"
            },
            {
              "label": "isBetaOperator",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:16"
            },
            {
              "label": "chaosnetOwner",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Chaosnet",
              "src": "@keep-network/sortition-pools/contracts/Chaosnet.sol:19"
            },
            {
              "label": "isLocked",
              "offset": 20,
              "slot": "13",
              "type": "t_bool",
              "contract": "SortitionPool",
              "src": "@keep-network/sortition-pools/contracts/SortitionPool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(OperatorRewards)6541_storage)": {
              "label": "mapping(uint32 => struct Rewards.OperatorRewards)",
              "numberOfBytes": "32"
            },
            "t_struct(OperatorRewards)6541_storage": {
              "label": "struct Rewards.OperatorRewards",
              "members": [
                {
                  "label": "accumulated",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "available",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "ineligibleUntil",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "weight",
                  "type": "t_uint32",
                  "offset": 28,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@keep-network/sortition-pools/contracts/SortitionTree.sol:SortitionTree": {
        "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:8",
        "version": {
          "withMetadata": "ee73ab4e8ed9253e3bfae0552a70b701c9af6c07326693decd6d17db8b7da901",
          "withoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7",
          "linkedWithoutMetadata": "9ec0c4320c5d34daa8fc612560816f65edc1e64be2e980e43ce463725c2baaa7"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/sortition-pools/contracts/Branch.sol:Branch",
          "@keep-network/sortition-pools/contracts/Position.sol:Position",
          "@keep-network/sortition-pools/contracts/Leaf.sol:Leaf",
          "@keep-network/sortition-pools/contracts/Constants.sol:Constants"
        ],
        "methods": [
          "()",
          "getOperatorID(address)",
          "getIDOperator(uint32)",
          "getIDOperators(uint32[])",
          "isOperatorRegistered(address)",
          "operatorsInPool()",
          "totalWeight()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SortitionTree",
            "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "root",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:21"
            },
            {
              "label": "branches",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:30"
            },
            {
              "label": "leaves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:34"
            },
            {
              "label": "flaggedLeafPosition",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:38"
            },
            {
              "label": "rightmostLeaf",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:41"
            },
            {
              "label": "emptyLeaves",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:45"
            },
            {
              "label": "operatorID",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:50"
            },
            {
              "label": "idAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SortitionTree",
              "src": "@keep-network/sortition-pools/contracts/SortitionTree.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7834828060f66da0039d30efb993f5f2643830d689ce2cdff803e8bbc308450e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "906cb7f0f5843b27e17df40f0dd37e51fd474892ce29df3caa57f7fc546ad01a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "d56dabd2b65ded96fca818086b2a2fd86ae5f0bda70fbccc2a0eecc15ed15953",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "702cc24e7a5c1d8e4d3a9f406b88de52aca211c426d4604c89a179d27c75ca0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "7f865809d60e93c3efd7b1af4bb15ff776ba9f3c7d1dc7885f79e07cc58f912c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efd3171a58b3b917cd07f35f8c485937fa0a30b212c4893ad6f264c9462a8195",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "6897bf0cdeb3ece2f2c03f8c94ed94150b8823eb184d5db12c18ef333f3fefcf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b0fccc5c954af5dd9623899b14b929d5a8f094ab28d9ba58a8ea4e0d549f4bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ff6c2317c31a63a013d923ab3df84fa78f33ae956c5917a3837aedb7bbcbd1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall": {
        "src": "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:IERC20WithPermit": {
        "src": "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol:18",
        "inherit": [
          "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol:IApproveAndCall",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "DOMAIN_SEPARATOR()",
          "nonce(address)",
          "PERMIT_TYPEHASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:IReceiveApproval": {
        "src": "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveApproval(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:IApplication": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IApplication.sol:32",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(address)",
          "authorizationIncreased(address,uint96,uint96)",
          "authorizationDecreaseRequested(address,uint96,uint96)",
          "involuntaryAuthorizationDecrease(address,uint96,uint96)",
          "availableRewards(address)",
          "minimumAuthorization()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:IStaking": {
        "src": "@threshold-network/solidity-contracts/contracts/staking/IStaking.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,address payable,address,uint96)",
          "stakeKeep(address)",
          "stakeNu(address,address payable,address)",
          "refreshKeepStakeOwner(address)",
          "setMinimumStakeAmount(uint96)",
          "approveApplication(address)",
          "increaseAuthorization(address,address,uint96)",
          "requestAuthorizationDecrease(address,address,uint96)",
          "requestAuthorizationDecrease(address)",
          "approveAuthorizationDecrease(address)",
          "forceDecreaseAuthorization(address,address)",
          "pauseApplication(address)",
          "disableApplication(address)",
          "setPanicButton(address,address)",
          "setAuthorizationCeiling(uint256)",
          "topUp(address,uint96)",
          "topUpKeep(address)",
          "topUpNu(address)",
          "unstakeT(address,uint96)",
          "unstakeKeep(address)",
          "unstakeNu(address,uint96)",
          "unstakeAll(address)",
          "notifyKeepStakeDiscrepancy(address)",
          "notifyNuStakeDiscrepancy(address)",
          "setStakeDiscrepancyPenalty(uint96,uint256)",
          "setNotificationReward(uint96)",
          "pushNotificationReward(uint96)",
          "withdrawNotificationReward(address,uint96)",
          "slash(uint96,address[])",
          "seize(uint96,uint256,address,address[])",
          "processSlashing(uint256)",
          "authorizedStake(address,address)",
          "stakes(address)",
          "getStartStakingTimestamp(address)",
          "stakedNu(address)",
          "rolesOf(address)",
          "getApplicationsLength()",
          "getSlashingQueueLength()",
          "getMinStaked(address,uint8)",
          "getAvailableToAuthorize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LightDkgValidator.sol:LightDkgValidator": {
        "src": "contracts/LightDkgValidator.sol:61",
        "version": {
          "withMetadata": "8b0a758eb6a46708b988e8095a105c08cb3c933af1237928ca134ac562b9b0e1",
          "withoutMetadata": "ef1af557b136e8efc3b15b6f9d5d1e2813bada0a6259a8bf80f41e8df17b154f",
          "linkedWithoutMetadata": "ef1af557b136e8efc3b15b6f9d5d1e2813bada0a6259a8bf80f41e8df17b154f"
        },
        "inherit": [],
        "libraries": [
          "@keep-network/random-beacon/contracts/libraries/BytesLib.sol:BytesLib",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address)",
          "validate((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256,uint256)",
          "validateFields((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))",
          "validateGroupMembers((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateSignatures((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32),uint256)",
          "validateMembersHash((uint256,bytes,uint8[],bytes,uint256[],uint32[],bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LightDkgValidator",
            "src": "contracts/LightDkgValidator.sol:94"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sortitionPool",
            "src": "contracts/LightDkgValidator.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bank": {
        "src": "contracts/Main.sol:117",
        "version": {
          "withMetadata": "eeaaaa3ab39515357752328bea2b32f54ba781bd992a0cbac707cf442acd2798",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Bridge": {
        "src": "contracts/Main.sol:143",
        "version": {
          "withMetadata": "2a07d835c304a8aaf11912a8a7d6abead7fb60a020c87125b8d77e9c90a39baf",
          "withoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2",
          "linkedWithoutMetadata": "1c22853010745c3ba78fc3c9df3afddd634305c788c9854444930725711b8fd2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "contractReferences()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bridge",
            "src": "contracts/Main.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_bank",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Bank)13856",
              "contract": "Bridge",
              "src": "contracts/Main.sol:144"
            },
            {
              "label": "_relay",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Relay)13857",
              "contract": "Bridge",
              "src": "contracts/Main.sol:145"
            },
            {
              "label": "_ecdsaWalletRegistry",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IWalletRegistry2)13873",
              "contract": "Bridge",
              "src": "contracts/Main.sol:146"
            },
            {
              "label": "_reimbursementPool",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Bridge",
              "src": "contracts/Main.sol:147"
            }
          ],
          "types": {
            "t_contract(Bank)13856": {
              "label": "contract Bank",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13873": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(Relay)13857": {
              "label": "contract Relay",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IMockRandomBaconConsumer": {
        "src": "contracts/Main.sol:86",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__beaconCallback(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:IWalletRegistry2": {
        "src": "contracts/Main.sol:131",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address)",
          "updateWalletOwner(address)",
          "requestNewWallet()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Main": {
        "src": "contracts/Main.sol:171",
        "version": {
          "withMetadata": "b3276052e033cb273d1b434f2b0418c5d8cc243d482ba33991334e0cba95e63b",
          "withoutMetadata": "33f2ec5262a2b68cd859415836e394d6ee18742d398f816d3bc55e935df790c8",
          "linkedWithoutMetadata": "33f2ec5262a2b68cd859415836e394d6ee18742d398f816d3bc55e935df790c8"
        },
        "inherit": [
          "@keep-network/ecdsa/contracts/api/IWalletOwner.sol:IWalletOwner"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setWalletRegistry(address)",
          "invokeWallet()",
          "invokeRelay()",
          "__ecdsaWalletCreatedCallback(bytes32,bytes32,bytes32)",
          "__ecdsaWalletHeartbeatFailedCallback(bytes32,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Main",
            "src": "contracts/Main.sol:182"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "randomBacon",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockRandomBacon)13855",
              "contract": "Main",
              "src": "contracts/Main.sol:172"
            },
            {
              "label": "bridge",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(Bridge)13956",
              "contract": "Main",
              "src": "contracts/Main.sol:173"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IStaking)12926",
              "contract": "Main",
              "src": "contracts/Main.sol:174"
            },
            {
              "label": "walletRegistry",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IWalletRegistry2)13873",
              "contract": "Main",
              "src": "contracts/Main.sol:175"
            },
            {
              "label": "walletCoordinator",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(WalletCoordinator)13858",
              "contract": "Main",
              "src": "contracts/Main.sol:176"
            },
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(MockSortitionPool)13767",
              "contract": "Main",
              "src": "contracts/Main.sol:177"
            },
            {
              "label": "reimbursementPool",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ReimbursementPool)5472",
              "contract": "Main",
              "src": "contracts/Main.sol:178"
            },
            {
              "label": "walletID",
              "offset": 0,
              "slot": "7",
              "type": "t_bytes32",
              "contract": "Main",
              "src": "contracts/Main.sol:180"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(Bridge)13956": {
              "label": "contract Bridge",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(IWalletRegistry2)13873": {
              "label": "contract IWalletRegistry2",
              "numberOfBytes": "20"
            },
            "t_contract(MockRandomBacon)13855": {
              "label": "contract MockRandomBacon",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13767": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_contract(ReimbursementPool)5472": {
              "label": "contract ReimbursementPool",
              "numberOfBytes": "20"
            },
            "t_contract(WalletCoordinator)13858": {
              "label": "contract WalletCoordinator",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockRandomBacon": {
        "src": "contracts/Main.sol:91",
        "version": {
          "withMetadata": "52eb27e40c899733426b6d9b71a89449d5d0f65417acbd1d6d3dca15ba0de45f",
          "withoutMetadata": "18192cdecc1dc8b31ec2bd3dfbcd88763382ccc1668d26929fd80f2179d2f56c",
          "linkedWithoutMetadata": "18192cdecc1dc8b31ec2bd3dfbcd88763382ccc1668d26929fd80f2179d2f56c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "requestRelayEntry(address)",
          "invokeRelay()",
          "operatorToStakingProvider(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockRandomBacon",
            "src": "contracts/Main.sol:97"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/Main.sol:94"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "sortitionPool",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockSortitionPool)13767",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:92"
            },
            {
              "label": "staking",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IStaking)12926",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:93"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:94"
            },
            {
              "label": "callback",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IMockRandomBaconConsumer)13788",
              "contract": "MockRandomBacon",
              "src": "contracts/Main.sol:95"
            }
          ],
          "types": {
            "t_contract(IMockRandomBaconConsumer)13788": {
              "label": "contract IMockRandomBaconConsumer",
              "numberOfBytes": "20"
            },
            "t_contract(IStaking)12926": {
              "label": "contract IStaking",
              "numberOfBytes": "20"
            },
            "t_contract(MockSortitionPool)13767": {
              "label": "contract MockSortitionPool",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockSortitionPool": {
        "src": "contracts/Main.sol:9",
        "version": {
          "withMetadata": "bc0abac6eb8c6a1f5e2910dc73cefef003c715237cd26fea25a75f6dcf8ebc4d",
          "withoutMetadata": "a04f7f89fa41a819d0cf82b56cb8b2705179d0ccab834eb9a9d0d62aa35a0e8d",
          "linkedWithoutMetadata": "a04f7f89fa41a819d0cf82b56cb8b2705179d0ccab834eb9a9d0d62aa35a0e8d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "isOperatorInPool(address)",
          "isOperatorUpToDate(address,uint256)",
          "isEligibleForRewards(address)",
          "lock()",
          "unlock()",
          "selectGroup(uint256,bytes32)",
          "getIDOperators(uint32[])",
          "getIDOperator(uint32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSortitionPool",
            "src": "contracts/Main.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "isLocked",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:10"
            },
            {
              "label": "maliciousOp",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:11"
            },
            {
              "label": "honestOp",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockSortitionPool",
              "src": "contracts/Main.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:MockStaking": {
        "src": "contracts/Main.sol:77",
        "version": {
          "withMetadata": "da444daccde96d03aecc9f26ef909fe1191cac6729d24d31eddc2f542ae82f89",
          "withoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b",
          "linkedWithoutMetadata": "a5e70775d13744a019351971b1a810714bb652744219137455626dd757d40c8b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "authorizedStake(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:Relay": {
        "src": "contracts/Main.sol:121",
        "version": {
          "withMetadata": "17b51d99f49dc428480aef8bc907346dbc4bd20aeb1cc7d3a7e6b6c8ac304d8c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:StakingProvider": {
        "src": "contracts/Main.sol:137",
        "version": {
          "withMetadata": "20e29b991252a585506b9dd054d381983a038b642668ba16e63eda6eafbeae5c",
          "withoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3",
          "linkedWithoutMetadata": "551de4481787196b13251d10a4f2ce14db8883eb71d35db7655c0b2f74b94bc3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerOperator(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Main.sol:WalletCoordinator": {
        "src": "contracts/Main.sol:127",
        "version": {
          "withMetadata": "7c748f764002b8fcae885b8a7f930ec8096d2f51f52accbc7bebb06955d75ba5",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}