import json
import logging
from dataclasses import dataclass, field
from typing import List, Dict

from aiohttp import web

from malicious_params import Params, load_params

params: List[Params] = load_params()


async def handle_get_params(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("idx",)):
        raise web.HTTPBadRequest
    idx = int(obj["idx"])
    if idx < 0 or idx > len(params) - 1:
        raise web.HTTPNotFound
    prm = params[idx]
    return web.Response(body=json.dumps({
        "p": hex(prm.p).lstrip("0x"),
        "q": hex(prm.q).lstrip("0x"),
        "h1": hex(prm.h1).lstrip("0x"),
        "h2": hex(prm.h2).lstrip("0x"),
        "dlog_proof_h2_base_h1_x": hex(prm.dlog_proof_h2_base_h1[0]).lstrip("0x"),
        "dlog_proof_h2_base_h1_y": hex(prm.dlog_proof_h2_base_h1[1]).lstrip("0x"),
        "dlog_proof_h1_base_h2_x": hex(prm.dlog_proof_h1_base_h2[0]).lstrip("0x"),
        "dlog_proof_h1_base_h2_y": hex(prm.dlog_proof_h1_base_h2[1]).lstrip("0x"),
    }))


@dataclass
class SigningData:
    m: int = 0
    rx: int = 0
    ry: int = 0
    s: int = 0
    k_i: int = 0
    h1_pow_k_j: List[int] = field(default_factory=list)


@dataclass
class SigningSession:
    pkx: int
    i: int
    data: SigningData


sessions: Dict[str, SigningSession] = {}


async def handle_create_session(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("sess_id", "pkx", "i")):
        raise web.HTTPBadRequest
    sessions[obj['sess_id']] = SigningSession(
        pkx=int(obj["pkx"]),
        i=int(obj["i"]),
        data=SigningData()
    )
    return web.Response()


async def handle_submit_signing_data(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("sess_id",)):
        raise web.HTTPBadRequest
    id = obj['sess_id']
    if id not in sessions:
        raise web.HTTPNotFound
    data = sessions[id].data
    for k, v in obj.items():
        try:
            v = int(v)
        except ValueError:
            pass
        if k == 'sess_id':
            continue
        if k == "m":
            data.m = v
        elif k == "rx":
            data.rx = v
        elif k == "ry":
            data.ry = v
        elif k == "s":
            data.s = v
        elif k == "k_i":
            data.k_i = v
        elif k == "h1_pow_k_j":
            data.h1_pow_k_j.append(v)
        else:
            print("Bad field:", k)
            raise web.HTTPBadRequest
    return web.Response()


async def handle_recover_private_key(request: web.Request) -> web.Response:
    pass


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    app.add_routes([web.post('/get-params', handle_get_params)])
    app.add_routes([web.post('/submit-data', handle_submit_signing_data)])
    app.add_routes([web.post('/recover-private-key', handle_recover_private_key)])
    web.run_app(app, port=1337)
