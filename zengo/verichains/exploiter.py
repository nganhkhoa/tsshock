import json
import logging
from dataclasses import dataclass, field
from typing import List, Dict

import sage.all as sg
from aiohttp import web

from malicious_params import Params, load_params

params: List[Params] = load_params()


async def handle_get_params(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("idx",)):
        raise web.HTTPBadRequest
    idx = int(obj["idx"])
    if idx < 0 or idx > len(params) - 1:
        raise web.HTTPNotFound
    prm = params[idx]
    return web.Response(body=json.dumps({
        "p": hex(prm.p).lstrip("0x"),
        "q": hex(prm.q).lstrip("0x"),
        "h1": hex(prm.h1).lstrip("0x"),
        "h2": hex(prm.h2).lstrip("0x"),
        "dlog_proof_h2_base_h1_x": hex(prm.dlog_proof_h2_base_h1[0]).lstrip("0x"),
        "dlog_proof_h2_base_h1_y": hex(prm.dlog_proof_h2_base_h1[1]).lstrip("0x"),
        "dlog_proof_h1_base_h2_x": hex(prm.dlog_proof_h1_base_h2[0]).lstrip("0x"),
        "dlog_proof_h1_base_h2_y": hex(prm.dlog_proof_h1_base_h2[1]).lstrip("0x"),
    }))


@dataclass
class SigningData:
    m: int = 0
    rx: int = 0
    ry: int = 0
    s: int = 0
    k_i: int = 0
    h1_pow_k_j: List[int] = field(default_factory=list)


@dataclass
class SigningSession:
    pkx: int
    i: int
    data: SigningData


sessions: Dict[str, SigningSession] = {}


async def handle_create_session(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("sess_id", "i", "pkx")):
        raise web.HTTPBadRequest
    sessions[obj['sess_id']] = SigningSession(
        i=int(obj["i"]),
        pkx=int(obj["pkx"]),
        data=SigningData()
    )
    return web.Response()


async def handle_submit_signing_data(request: web.Request) -> web.Response:
    obj = await request.json()
    print(obj)
    if any(field not in obj for field in ("sess_id",)):
        raise web.HTTPBadRequest
    id = obj['sess_id']
    if id not in sessions:
        raise web.HTTPNotFound
    data = sessions[id].data
    for k, v in obj.items():
        if k == 'sess_id':
            continue
        elif k == "m":
            data.m = int(v)
        elif k == "rx":
            data.rx = int(v)
        elif k == "ry":
            data.ry = int(v)
        elif k == "s":
            data.s = int(v)
        elif k == "k_i":
            data.k_i = int(v)
        elif k == "h1_pow_k_j":
            data.h1_pow_k_j = list(map(int, v))
        else:
            print("Bad field:", k)
            raise web.HTTPBadRequest
    return web.Response()


SECP256K1 = sg.EllipticCurve(sg.GF(2 ** 256 - 2 ** 32 - 977), [0, 7])
G = SECP256K1((
    55066263022277343669578718895168534326250603453777594175500187360389116729240,
    32670510020758816978083085130507043184471273380659243275938904335757337482424))
Q = SECP256K1.cardinality()


async def handle_recover_private_key(request: web.Request) -> web.Response:
    obj = await request.json()
    print(obj)
    if any(field not in obj for field in ("indices", "n")):
        raise web.HTTPBadRequest

    kr, mod = 0, 1
    pkx, rx, ry, m, s = 0, 0, 0, 0, 0
    for idx in map(int, obj["indices"]):
        p = params[idx].p
        Fp = sg.GF(p)
        h1 = Fp(params[idx].h1)
        for sess in sessions.values():
            if sess.i == idx:
                data = sess.data
                if pkx == 0:
                    pkx, rx, ry, m, s = sess.pkx, data.rx, data.ry, data.m, data.s
                else:
                    assert (pkx, rx, ry, m, s) == (sess.pkx, data.rx, data.ry, data.m, data.s)
                k = (data.k_i + int(sg.product(Fp(x) for x in data.h1_pow_k_j).log(h1))) % (p - 1)
                kr = int(sg.crt(k, kr, p - 1, mod))
                mod = int(sg.lcm(p - 1, mod))
                break

    ub = Q * int(obj["n"]) // mod + 1
    print(f"k = {kr}\n mod {mod}")
    print(f"ub = {ub} ({ub.bit_length()}-bit)")

    R = SECP256K1((rx, ry))
    k = sg.discrete_log(G - R * kr, R * mod, bounds=[0, ub], operation='+') * mod + kr
    print(f"k = {k} ({k.bit_length()}-bit)")
    print(sum(sess.data.k_i for sess in sessions.values()))

    Fq = sg.GF(Q)
    x = int((Fq(s) / k - m) / rx)
    if int((x * G)[0]) != pkx:
        x = int((Fq(-s) / k - m) / rx)
        assert int((x * G)[0]) == pkx

    print(f"x: {x}")

    return web.Response()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    app.add_routes([web.post('/get-params', handle_get_params)])
    app.add_routes([web.post('/create-session', handle_create_session)])
    app.add_routes([web.post('/submit-data', handle_submit_signing_data)])
    app.add_routes([web.post('/recover-private-key', handle_recover_private_key)])
    web.run_app(app, port=1337)
