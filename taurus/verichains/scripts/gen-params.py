import sage.all as sg
from Crypto.Util.number import bytes_to_long, long_to_bytes, ceil_div
import multiprocessing as mp
import subprocess as sp

SECP256K1_Q = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141


def concat_ints(*ints) -> int:
    result = 0
    for i in reversed(ints):
        length = sg.ceil(result.bit_length() / 8) * 8
        result += i << length
    return result


DELIM_C = b')(big.Int\x02'
DELIM_D = b')(*safenum.Nat'

a = sg.ZZ(1)

C = bytes_to_long(DELIM_C)
D = bytes_to_long(DELIM_D)

# %%

sg.magma.SetNthreads(mp.cpu_count())

# for i in range(10, 50):
#     alpha1 = C * 2 ** i
#     alpha0 = concat_ints(alpha1, C, alpha1)
#     print(alpha0.bit_length())
#     tmp = sg.magma.Factorization(alpha0 + 1)
#     p = [int(p) for p, j in tmp][-1]
#
#     tmp = "[skipped]"
#     if p > SECP256K1_Q:
#         tmp = sg.magma.Factorization(p - 1)
#     print(i, p.bit_length(), tmp)

i = 30
alpha1 = C * 2 ** i
alpha0 = concat_ints(alpha1, C, alpha1)
# tmp = sg.magma.Factorization(alpha0 + 1)
# p = [int(p) for p, j in tmp][-1]
#

p = 7160841592308506482028841450101121191959671435116473416821458490878238158385842424723
Fp = sg.GF(p)
# sg.magma.Factorization(p - 1)


assert alpha0 % alpha1 == 0
assert DELIM_C in long_to_bytes(alpha0)
assert Fp(alpha0) == -1

h1 = alpha0 // alpha1
order_h1 = int(sg.magma.Order(Fp(h1) ** 2))
assert order_h1 > SECP256K1_Q

# sg.magma.Log(Fp(2), Fp(2)**2)

# %%

ell = 55203145225092172882937151745333116390629453392100351661461466341434790533201579


# sp.check_call(f"/home/hh/tmp/cado-nfs/cado-nfs.py -dlp -ell {ell} --workdir /home/hh/tmp/cado-session {p}",
#               shell=True)


def fp_log(g, h):
    tried = 0
    while True:
        try:
            line = sp.check_output(
                f"/home/hh/tmp/cado-nfs/cado-nfs.py /home/hh/tmp/cado-session/p85.parameters_snapshot.0 target={h},{g}",
                shell=True)
            eh, eg = map(int, line.split(b','))
            e = int(sg.GF(ell)(eh) / eg)
            break
        except:  # sophisticated error from cado-nfs, simply retry
            h = h * g % p
            tried += 1

    order = sg.ZZ(sg.magma.Order(Fp(g) ** ell))
    return int(sg.crt([e, sg.discrete_log(Fp(h) ** ell, Fp(g) ** ell, ord=order)], [ell, order])) - tried


fp_log(h1, pow(h1, 99999999999999999999999999999, p))

# %%
# from _util import search_prime
#
# min_q = (2 ** 2047) // p + 1
# max_q = (2 ** 2048 - 1) // p - 1
# while True:
#     q = search_prime(min_q, max_q)
#     Fq = sg.GF(q)
#     if sg.gcd(p - 1, q - 1) != 2 or sg.is_square(Fq(alpha0)):
#         continue
#     break

q = 2648415891041285373419952303797986697168034338335113914310833287421405391021700694563866614919268406711965665023100553571153463733379736158696409823761176339417180938154045710095986047208052914068704338508245589706094353860071161946126953622895551919165097800571532345137534062922423897682818831214061237231470527976982974688430063458032163606074599316020930245308379738315645944823938562687834248030494315725554668836748830029995745926076055868955902030684770107358866829669851054330176670949260597007176872945571096972996699042903
Fq = sg.GF(q)
n = p * q
assert n.bit_length() == 2048

# v = 0
# for v in range(2, 100):
#     if int(sg.magma.Order(Fp(v))) != p - 1:
#         continue
#     if int(sg.magma.Order(Fq(v))) != q - 1:
#         continue
#     break
# assert v < 99
#
# D_v = concat_ints(D, v)
# u = int((Fp(-1) - D_v) / 2 ** (ceil_div(D_v.bit_length(), 8) * 8))
# while True:
#     h2 = concat_ints(u, D, v)
#     h1_ = concat_ints(h1, D, u)
#     h2_ = v
#     if any([
#         sg.magma.Order(Fq(h2)) != q - 1,  # dlog(alpha0, base=h2) may not exist
#         sg.is_square(Fp(h1_)) != sg.is_square(Fq(h1_))  # dlog(h1_, base=h2_) not exist
#     ]):
#         u += p
#         continue
#     break
#
# dlog_alpha0_base_h2_over_p = 1
# dlog_alpha0_base_h2_over_q = int(sg.magma.Log(Fq(h2), Fq(alpha0)))
# dlog_alpha0_base_h2 = int(sg.crt([dlog_alpha0_base_h2_over_p, dlog_alpha0_base_h2_over_q], [2, q - 1]))
#
# dlog_h1__base_h2__over_p = fp_log(h2_, h1_)
# dlog_h1__base_h2__over_q = int(sg.magma.Log(Fq(h2_), Fq(h1_)))
# dlog_h1__base_h2_ = int(sg.crt([dlog_h1__base_h2__over_p, dlog_h1__base_h2__over_q], [p - 1, q - 1]))
#
# assert pow(h2, dlog_alpha0_base_h2, n) == alpha0
# assert pow(h2_, dlog_h1__base_h2_, n) == h1_

u = 1199874037375043297646645539750754567809601433617682046341837048179156656289717523200
v = 5
dlog_alpha0_base_h2 = 2499695294202494953703270945597725095331900453407577794091196561616307226428633949784538051987254459128291082905605167691377188928800076240737336552139493552616694940569816635791526249844380587045938597122569643759425772704921439480553245774346184512548493351142892943721894650512552889368292553598369152297106312623210766003909197447727767808837610251381304828693924772790607347045810766675412748952019043798517082840183706068914561545158167396139171490295477042801952805004793674153761017842619018168576331684901675777937157326093
dlog_h1__base_h2_ = 8658787382947966404443583996597364675550100254436764916168647129344069851842953363908034275538818544764402406795965582843361518398350380828539422049213305801499084608819463321634389507279174617902910896352463616866015125980178105168595469670786033127798008030691380637858637278986727205803506153381061985854993134945289379459044180076176226975241473444870482442545170911874437165054819213420554826143289716508820967233485171502815686805042438444295363340326390807900535770377981100599299167714743312266918021690969277886896795229442272443852031166041874336968927433132654811333837308538758147377736236916759564004633
h2 = concat_ints(u, D, v)
h1_ = concat_ints(h1, D, u)
h2_ = v

assert Fp(h2) == -1
assert concat_ints(h1, D, h2) == concat_ints(h1_, D, h2_)
assert all(hi < n for hi in [h1, h2, h1_, h2_])
assert pow(h2, dlog_alpha0_base_h2, n) == alpha0
assert pow(h2_, dlog_h1__base_h2_, n) == h1_

print(f"""
p = {long_to_bytes(p).hex().upper()}
q = {long_to_bytes(q).hex().upper()}
h1 = {long_to_bytes(h1).hex().upper()}
h2 = {long_to_bytes(h2).hex().upper()}
h1_ = {long_to_bytes(h1_).hex().upper()}
h2_ = {long_to_bytes(h2_).hex().upper()}
dlog_alpha0_base_h2 = {long_to_bytes(dlog_alpha0_base_h2).hex().upper()}
dlog_h1__base_h2_ = {long_to_bytes(dlog_h1__base_h2_).hex().upper()}
alpha0 = {long_to_bytes(alpha0).hex().upper()}
alpha1 = {long_to_bytes(alpha1).hex().upper()}
""")

# p = 03AFA33AFCCD44DDE8911926A41238B1DBB02F26A10059345BA3B7075CA016068DA30B93
# q = 28C197221C5C29F56034D555F440B73B11DB19249C11B551E16A19DD814B7BC2244BC637AFCF92A29F1FE8AF15FA5DF0E9D0692725D2BE936223CFB5F9BFA112DC948490BA3621EA0ABDCC12AEBB0A2DDD2969226E302E1A7E0C5645599205D79DD3308919958F375EC5794ACEC989DDEC641CC70D7BD967FB34C78E11E26FB04B77170FD8B750F99029CB7D5F3C0C36E583323ECE6D7300F32B5E93D184B685816B1DF3F841326E85DBC34A46F917772728804759C7CEB5CC82DE8B06673D589CA4F420459A5EB8A684396B40F3DEB38F8217E6499FEA6E540DB93457
# h1 = 01000000000000000000000000000400000000000000000001
# h2 = 9E1DCA6E80C8534BD5CBDD49B1177B870EFFA1009BB5017486337EBE7F91A47A5D930029282A736166656E756D2E4E617405
# h1_ = 0100000000000000000000000000040000000000000000000129282A736166656E756D2E4E61749E1DCA6E80C8534BD5CBDD49B1177B870EFFA1009BB5017486337EBE7F91A47A5D9300
# h2_ = 05
# dlog_alpha0_base_h2 = 2677B262788B344913538AB3B6CC36FB0370945A37322CC944B17373A03D33CACEB46533C16935E3C504198A5EAA9139B6AE88F25C8A9A0B26CF42BD2D87E9E964EB54E42A4DFFCFBED6E890D20FAAECB21D0B90E159B4402F8452A790157ABBA2493D999051D4808859B50BC6ED5A14206FA38401B49241DFE2B0837B724383F80B3B535A6C094460FBC950547EE90171EA8B642C035D018A68D8F51AA843AF5664EB15105148D505DD927BB219D1A3269D32C067E5356A1B7643CDAA17AA6E71A5D6E9F4BC84BEB6CA7272288FC08032B87ED17DDD6F14D634C3050D
# dlog_h1__base_h2_ = 44973F376199FB5853980443A3768651C675D1015A5667362EB471307D46E1214BDC26947D45BF432F9788481E1D3C04C752F53BAE2B9A7968D2D926F9CEF277F275D3512049FB9F43A60A2F33C4B6747DDEA002BBA0E0D019DFA72DB17CF08DD26BC882FCAF3E0042935F3EDBA71FED39DDB19CE6CD2388F8287014EF2DCAB92EFA19A198AE5D82A8AFB1580798CEC004C002379C58DB7CCA8C5286759082536AD8425951A619B29EED39E86516E45AEAB5494A8D538F9AAE5EB13DE3F1573E94F005627863FB7871C1E4905124F27906426AEF51A056B3F75BBBF433261BEE67A36D3608879AC71CE9E3FAB9889D3BC8A546E0C7C22AD58847665C9B462D19
# alpha0 = 0A4A189A59CB925B9D008000000029286269672E496E74020A4A189A59CB925B9D0080000000
# alpha1 = 0A4A189A59CB925B9D0080000000

# %%

import re
data ="""
2022/12/26 22:11:18 [a] w = 14061082239013470883206547026241619243638572775603037725128785759824285414588
2022/12/26 22:11:18 [d] w = 70110646353636679787310188809971066822289388277325386996789592460321789890712
2022/12/26 22:11:18 [e] w = 4118135480949620925837994511773924877406475948347592970724815030188915816847
2022/12/26 22:11:18 [c] w = 68131611376626089716191474594526841094409158816964447641037703088830906663436
2022/12/26 22:11:18 [b] w = 36348091956330247418513821616885823141730958695193927401303602669642293735602
"""
sum(map(int, re.findall(r"\d{20,}", data)))