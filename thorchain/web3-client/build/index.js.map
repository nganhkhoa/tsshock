{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { LiquidityPosition, Midgard, ThorchainCache, ThorchainQuery, Thornode } from '@xchainjs/xchain-thorchain-query'\nimport { ThornodeConfig, MidgardConfig } from '@xchainjs/xchain-thorchain-query'\nimport { Asset, assetAmount, assetFromString, AssetRuneNative, assetToBase, baseToAsset } from '@xchainjs/xchain-util'\nimport { Balance, Network } from '@xchainjs/xchain-client';\nimport { NodeUrl } from '@xchainjs/xchain-thorchain/lib/types';\nimport { Client, DECIMAL } from '@xchainjs/xchain-thorchain'\nimport { VaultsApi, Configuration } from '@xchainjs/xchain-thornode'\nconst util = require('util')\n\nconst MIDGARD_URL = 'http://192.168.1.151:8080'\nconst THORNODE_API_URL = 'http://192.168.1.151:1317'\nconst THORNODE_RPC_URL = 'http://192.168.1.151:26657'\n// const MIDGARD_URL = 'http://172.16.128.103:8080'\n// const THORNODE_API_URL = 'http://172.16.128.103:1317'\n// const THORNODE_RPC_URL = 'http://172.16.128.103:26657'\nconst SEEDPHRASE = {\n  cat: 'cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat crawl',\n  dog: 'dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog fossil',\n  fox: 'fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox fox filter',\n  pig: 'pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig pig quick'\n}\n\nconst midgardConf: MidgardConfig = {\n  apiRetries: 3,\n  midgardBaseUrls: [MIDGARD_URL],\n}\n\nconst thornodeConf: ThornodeConfig = {\n  apiRetries: 3,\n  thornodeBaseUrls: [THORNODE_API_URL],\n}\n\nconst clientUrl: Record<Network, NodeUrl> = {\n  mainnet: { node: THORNODE_API_URL, rpc: THORNODE_RPC_URL },\n  stagenet: { node: THORNODE_API_URL, rpc: THORNODE_RPC_URL },\n  testnet: { node: THORNODE_API_URL, rpc: THORNODE_RPC_URL }\n}\n\nconst midgard = new Midgard(Network.Testnet, midgardConf)\nconst thornode = new Thornode(Network.Testnet, thornodeConf)\nconst thorchainQuery = new ThorchainQuery(new ThorchainCache(midgard, thornode))\nconst vaultApi = new VaultsApi(new Configuration({ basePath: THORNODE_API_URL }))\n\nfunction printObj(obj: any) {\n  console.log(util.inspect(obj, { colors: true, depth: 10 }))\n}\n\nfunction printBalance(allBalance: Balance[]) {\n  const assets = []\n  for (const { asset, amount } of allBalance) {\n    assets.push({\n      asset: `${asset.chain}.${asset.symbol}`,\n      amount: amount.amount().toString()\n    })\n  }\n  printObj(assets)\n}\n\nconst main = async () => {\n  const thorClient = new Client({ network: Network.Testnet, clientUrl: clientUrl })\n  thorClient.setChainId(\"thorchain\", Network.Testnet)\n  // const asgardVault = await vaultApi.asgard()\n  // printObj(asgardVault.data)\n  // console.log()\n  const balance = await thorClient.getBalance(\"tthor1dcx60m4dxx7jcy97l26rk7j86hjjy900r9976h\")\n  printBalance(balance)\n  // try {\n  //   const txid = await thorClient.transfer({\n  //     amount: assetToBase(assetAmount(1, DECIMAL)),\n  //     recipient: 'tthor1893wznxy5aq43tlhzn7ercgpgsyqhjfdy0fu7s',\n  //     memo: \"SWAP:ETH.ETH:0x230934293E0bF9d1344B5C0953D3a6e25BfcBe00\",\n  //     asset: assetFromString('THOR.RUNE') as Asset,\n  //     walletIndex: 0\n  //   })\n  //   console.log(`Transaction sent: ${JSON.stringify(txid)}`)\n  //   const balance = await thorClient.getBalance(thorClient.getAddress())\n  //   printBalance(balance)\n  // } catch (error) {\n  //   console.error(error)\n  // }\n  // console.log(balance)\n  // const asset = assetFromString('BTC.BTC') as Asset\n  // let assetAmount = (baseToAsset(balance[0].amount)).amount()\n\n  // amount, memo, gasLimit\n  // thorClient.deposit(0, asset,)\n  // const assets = await thorClient.getBalance(thorClient.getAddress())\n  // const assetBTCBTC\n  // const asgardVault = await vaultApi.asgard()\n  // printObj(asgardVault.data)\n\n  // const asset = assetFromString('BTC.BTC') as Asset // pool to check\n  // const address = 'bc1qufc5hvfvszphksqawadpc63ujarhjpn26je2jn' // THOR or Asset address\n  // util.inspect()\n\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((err) => console.error(err))"],
  "mappings": ";AAAA,oCAAqF;AAGrF,2BAAiC;AAEjC,8BAAgC;AAChC,6BAAyC;AACzC,MAAM,OAAO,QAAQ,MAAM;AAE3B,MAAM,cAAc;AACpB,MAAM,mBAAmB;AACzB,MAAM,mBAAmB;AAIzB,MAAM,aAAa;AAAA,EACjB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AAEA,MAAM,cAA6B;AAAA,EACjC,YAAY;AAAA,EACZ,iBAAiB,CAAC,WAAW;AAC/B;AAEA,MAAM,eAA+B;AAAA,EACnC,YAAY;AAAA,EACZ,kBAAkB,CAAC,gBAAgB;AACrC;AAEA,MAAM,YAAsC;AAAA,EAC1C,SAAS,EAAE,MAAM,kBAAkB,KAAK,iBAAiB;AAAA,EACzD,UAAU,EAAE,MAAM,kBAAkB,KAAK,iBAAiB;AAAA,EAC1D,SAAS,EAAE,MAAM,kBAAkB,KAAK,iBAAiB;AAC3D;AAEA,MAAM,UAAU,IAAI,sCAAQ,6BAAQ,SAAS,WAAW;AACxD,MAAM,WAAW,IAAI,uCAAS,6BAAQ,SAAS,YAAY;AAC3D,MAAM,iBAAiB,IAAI,6CAAe,IAAI,6CAAe,SAAS,QAAQ,CAAC;AAC/E,MAAM,WAAW,IAAI,iCAAU,IAAI,qCAAc,EAAE,UAAU,iBAAiB,CAAC,CAAC;AAEhF,SAAS,SAAS,KAAU;AAC1B,UAAQ,IAAI,KAAK,QAAQ,KAAK,EAAE,QAAQ,MAAM,OAAO,GAAG,CAAC,CAAC;AAC5D;AAEA,SAAS,aAAa,YAAuB;AAC3C,QAAM,SAAS,CAAC;AAChB,aAAW,EAAE,OAAO,OAAO,KAAK,YAAY;AAC1C,WAAO,KAAK;AAAA,MACV,OAAO,GAAG,MAAM,SAAS,MAAM;AAAA,MAC/B,QAAQ,OAAO,OAAO,EAAE,SAAS;AAAA,IACnC,CAAC;AAAA,EACH;AACA,WAAS,MAAM;AACjB;AAEA,MAAM,OAAO,YAAY;AACvB,QAAM,aAAa,IAAI,+BAAO,EAAE,SAAS,6BAAQ,SAAS,UAAqB,CAAC;AAChF,aAAW,WAAW,aAAa,6BAAQ,OAAO;AAIlD,QAAM,UAAU,MAAM,WAAW,WAAW,8CAA8C;AAC1F,eAAa,OAAO;AA8BtB;AAEA,KAAK,EACF,KAAK,MAAM,QAAQ,KAAK,CAAC,CAAC,EAC1B,MAAM,CAAC,QAAQ,QAAQ,MAAM,GAAG,CAAC;",
  "names": []
}
