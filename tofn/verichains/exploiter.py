import logging
from dataclasses import dataclass, field
from typing import Dict, List

from aiohttp import web
# from sage.all import GF, product


@dataclass
class SigningData:
    m: int = 0
    r: int = 0
    s: int = 0
    delta: int = 0
    w_i: int = 0
    h1_pow_w_j: List[int] = field(default_factory=list)
    gamma_i: int = 0
    h1_pow_gamma_j: List[int] = field(default_factory=list)


@dataclass
class SigningSession:
    pkx: int
    i: int
    data: SigningData


sessions: Dict[str, SigningSession] = {}


async def handle_create_session(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("sess_id", "pkx", "i")):
        raise web.HTTPBadRequest
    sessions[obj['sess_id']] = SigningSession(
        pkx=bytes(obj["pkx"][1:]),
        i=obj["i"],
        data=SigningData()
    )
    print(sessions[obj['sess_id']])
    return web.Response()


async def handle_submit_signing_data(request: web.Request) -> web.Response:
    obj = await request.json()
    print(obj)
    if any(field not in obj for field in ("sess_id",)):
        raise web.HTTPBadRequest
    id = obj['sess_id']
    if id not in sessions:
        raise web.HTTPNotFound
    data = sessions[id].data
    for k, v in obj.items():
        if k == 'sess_id':
            continue
        if k == "m":
            data.m = int(v, 16)
        elif k == "r":
            data.r = int(v, 16)
        elif k == "s":
            data.s = int(v, 16)
        elif k == "delta":
            data.delta = int(v, 16)
        elif k == "w_i":
            data.w_i = int(v, 16)
        elif k == "gamma_i":
            data.gamma_i = int(v, 16)
        elif k == "h1_pow_w_j":
            data.h1_pow_w_j.append(int(v))
        elif k == "h1_pow_gamma_j":
            data.h1_pow_gamma_j.append(int(v))
        else:
            print("Bad field:", k)
            raise web.HTTPBadRequest
    return web.Response()


async def handle_recover_private_key(request: web.Request) -> web.Response:
    obj = await request.json()
    if any(field not in obj for field in ("pkx", "i")):
        raise web.HTTPBadRequest
    data = []
    for s in sessions.values():
        if (s.pkx, s.i) == (obj["pkx"], obj["i"]):
            data.append(s.data)
    if not data:
        raise web.HTTPNotFound

    recover_private_key(obj["pkx"], data)
    return web.Response()


PARAMS = {
    "p": 57503,
    "h1": 1337,
}


# def recover_private_key(pkx: int, data: List[SigningData]) -> int:
#     p = PARAMS["p"]
#     Fp = GF(p)
#     h1 = Fp(PARAMS["h1"])
#     for sd in data:
#         m, r, s, delta = sd.m, sd.r, sd.s, sd.delta
#         w_r = (sd.w_i + product(Fp(x) for x in sd.h1_pow_w_j).log(h1)) % (p - 1)
#         gamma_r = (sd.gamma_i + product(Fp(x) for x in sd.h1_pow_gamma_j).log(h1)) % (p - 1)
#     return 0


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    app.add_routes([web.post('/create-session', handle_create_session)])
    app.add_routes([web.post('/submit-signing-data', handle_submit_signing_data)])
    app.add_routes([web.post('/recover-private-key', handle_recover_private_key)])
    web.run_app(app, port=1337)
