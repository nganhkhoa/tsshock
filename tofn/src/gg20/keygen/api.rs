use libpaillier::unknown_order::BigNumber;
use crate::crypto_tools::paillier::zk::{CompositeDLogProof, CompositeDLogStmtBase};

use super::r1;
use crate::{
    collections::TypedUsize,
    crypto_tools::{
        paillier::{
            self,
            zk::{EncryptionKeyProof, ZkSetup, ZkSetupProof},
            DecryptionKey, EncryptionKey,
        },
        rng,
    },
    gg20::constants::{KEYPAIR_TAG, ZKSETUP_TAG},
    sdk::{
        api::{PartyShareCounts, Protocol, TofnFatal, TofnResult},
        implementer_api::{new_protocol, ProtocolBuilder},
    },
};
use serde::{Deserialize, Serialize};
use tracing::error;
use zeroize::Zeroize;

#[cfg(feature = "malicious")]
use super::malicious;

/// Maximum byte length of messages exchanged during keygen.
/// The sender of a message larger than this maximum will be accused as a faulter.
/// View all message sizes in the logs of the integration test `single_thred::basic_correctness`.
/// The largest keygen message is r1::Bcast with size ~4833 bytes on the wire.
/// There is also a variable-sized message in r2::Bcast that depends on the
/// threshold: 34t + 73. For t = 100, this is still smaller than the limit.
/// See https://github.com/axelarnetwork/tofn/issues/171
pub const MAX_MSG_LEN: usize = 5500;

pub use super::secret_key_share::*;
pub use rng::SecretRecoveryKey;

#[derive(Debug, Clone, Copy, PartialEq, Serialize, Deserialize)]
pub struct KeygenShareId;

#[derive(Debug, Clone, Copy, PartialEq, Serialize, Deserialize)]
pub struct KeygenPartyId;

pub type KeygenProtocol = Protocol<SecretKeyShare, KeygenShareId, KeygenPartyId, MAX_MSG_LEN>;
pub type KeygenProtocolBuilder = ProtocolBuilder<SecretKeyShare, KeygenShareId>;
pub type KeygenPartyShareCounts = PartyShareCounts<KeygenPartyId>;

#[derive(Debug, Clone, Zeroize)]
#[zeroize(drop)]
pub struct PartyKeyPair {
    pub(super) ek: EncryptionKey,
    pub(super) dk: DecryptionKey,
}

#[derive(Debug, Clone)]
pub struct PartyKeygenData {
    pub(super) encryption_keypair: PartyKeyPair,
    pub(super) encryption_keypair_proof: EncryptionKeyProof,
    pub(super) zk_setup: ZkSetup,
    pub(super) zk_setup_proof: ZkSetupProof,
}

// Since safe prime generation is expensive, a party is expected to generate
// a keypair once for all it's shares and provide it to new_keygen
pub fn create_party_keypair_and_zksetup(
    my_party_id: TypedUsize<KeygenPartyId>,
    secret_recovery_key: &SecretRecoveryKey,
    session_nonce: &[u8],
) -> TofnResult<PartyKeygenData> {
    let encryption_keypair =
        recover_party_keypair(my_party_id, secret_recovery_key, session_nonce)?;

    let encryption_keypair_proof = encryption_keypair
        .ek
        .correctness_proof(&encryption_keypair.dk, &my_party_id.to_bytes());

    let mut zksetup_rng =
        rng::rng_seed(ZKSETUP_TAG, my_party_id, secret_recovery_key, session_nonce)?;
    let (zk_setup, zk_setup_proof) = ZkSetup::new(&mut zksetup_rng, &my_party_id.to_bytes())?;

    Ok(PartyKeygenData {
        encryption_keypair,
        encryption_keypair_proof,
        zk_setup,
        zk_setup_proof,
    })
}

pub fn recover_party_keypair(
    my_party_id: TypedUsize<KeygenPartyId>,
    secret_recovery_key: &SecretRecoveryKey,
    session_nonce: &[u8],
) -> TofnResult<PartyKeyPair> {
    let mut rng = rng::rng_seed(KEYPAIR_TAG, my_party_id, secret_recovery_key, session_nonce)?;

    let (ek, dk) = paillier::keygen(&mut rng)?;

    Ok(PartyKeyPair { ek, dk })
}

// BEWARE: This is only made visible for faster integration testing
pub fn create_party_keypair_and_zksetup_unsafe(
    my_party_id: TypedUsize<KeygenPartyId>,
    secret_recovery_key: &SecretRecoveryKey,
    session_nonce: &[u8],
) -> TofnResult<PartyKeygenData> {
    let encryption_keypair =
        recover_party_keypair_unsafe(my_party_id, secret_recovery_key, session_nonce)?;

    let encryption_keypair_proof = encryption_keypair
        .ek
        .correctness_proof(&encryption_keypair.dk, &my_party_id.to_bytes());

    if my_party_id.as_usize() == 0 {
        let (malicious_zk_setup, malicious_proof) = get_zk_setup(0);
        return Ok(PartyKeygenData {
            encryption_keypair,
            encryption_keypair_proof,
            zk_setup: malicious_zk_setup,
            zk_setup_proof: malicious_proof,
        })
    }


    let mut zksetup_rng =
        rng::rng_seed(ZKSETUP_TAG, my_party_id, secret_recovery_key, session_nonce)?;
    let (zk_setup, zk_setup_proof) =
        ZkSetup::new_unsafe(&mut zksetup_rng, &my_party_id.to_bytes())?;

    Ok(PartyKeygenData {
        encryption_keypair,
        encryption_keypair_proof,
        zk_setup,
        zk_setup_proof,
    })
}

// BEWARE: This is only made visible for faster integration testing
pub fn recover_party_keypair_unsafe(
    my_party_id: TypedUsize<KeygenPartyId>,
    secret_recovery_key: &SecretRecoveryKey,
    session_nonce: &[u8],
) -> TofnResult<PartyKeyPair> {
    let mut rng = rng::rng_seed(KEYPAIR_TAG, my_party_id, secret_recovery_key, session_nonce)?;

    let (ek, dk) = paillier::keygen_unsafe(&mut rng)?;

    Ok(PartyKeyPair { ek, dk })
}

// Can't define a keygen-specific alias for `RoundExecuter` that sets
// `FinalOutputTyped = KeygenOutput` and `Index = KeygenPartyIndex`
// because https://github.com/rust-lang/rust/issues/41517

// TODO use const generics for these bounds
pub const MAX_TOTAL_SHARE_COUNT: usize = 1000;
pub const MAX_PARTY_SHARE_COUNT: usize = MAX_TOTAL_SHARE_COUNT;

// BEWARE: This is only made visible for faster integration testing
// TODO: Use a better way to hide this from the API, while allowing it for integration tests
// since #[cfg(tests)] only works for unit tests

/// Initialize a new keygen protocol
#[allow(clippy::too_many_arguments)]
pub fn new_keygen(
    party_share_counts: KeygenPartyShareCounts,
    threshold: usize,
    my_party_id: TypedUsize<KeygenPartyId>,
    my_subshare_id: usize, // in 0..party_share_counts[my_party_id]
    party_keygen_data: &PartyKeygenData,
    #[cfg(feature = "malicious")] behaviour: malicious::Behaviour,
) -> TofnResult<KeygenProtocol> {
    // validate args
    if party_share_counts
        .iter()
        .any(|(_, &c)| c > MAX_PARTY_SHARE_COUNT)
    {
        error!(
            "detected a party with share count exceeding {}",
            MAX_PARTY_SHARE_COUNT
        );
        return Err(TofnFatal);
    }
    let total_share_count: usize = party_share_counts.total_share_count();
    let my_keygen_id = party_share_counts.party_to_share_id(my_party_id, my_subshare_id)?;

    #[allow(clippy::suspicious_operation_groupings)]
    if total_share_count <= threshold
        || total_share_count > MAX_TOTAL_SHARE_COUNT
        || my_party_id.as_usize() >= party_share_counts.party_count()
    {
        error!(
            "invalid (total_share_count, threshold, my_party_id, my_subshare_id, max_share_count): ({},{},{},{},{})",
            total_share_count, threshold, my_party_id, my_subshare_id, MAX_TOTAL_SHARE_COUNT
        );
        return Err(TofnFatal);
    }

    let round2 = r1::start(
        my_keygen_id,
        threshold,
        party_share_counts.clone(),
        party_keygen_data,
        #[cfg(feature = "malicious")]
        behaviour,
    )?;

    new_protocol(party_share_counts, my_keygen_id, round2)
}

fn get_zk_setup(i: i32) -> (ZkSetup, ZkSetupProof) {
    println!("ASDASDASLKDJSAKLDJSAKLDJSAL:KDJAS:LKDJKSLA:DJ:LSKADJ:ASLDJ: {}", i);
    match i {
        0 => (ZkSetup {
            dlog_stmt: CompositeDLogStmtBase {
                n: BigNumber::from_slice([234, 249, 118, 18, 165, 123, 51, 97, 89, 154, 53, 18, 232, 138, 251, 46, 132, 80, 180, 156, 123, 210, 127, 124, 190, 61, 50, 46, 191, 119, 55, 204, 239, 29, 37, 212, 50, 183, 37, 7, 11, 20, 82, 77, 99, 109, 83, 47, 254, 188, 24, 249, 173, 141, 230, 32, 226, 222, 196, 0, 37, 24, 216, 123, 68, 180, 6, 154, 195, 187, 247, 184, 140, 153, 37, 128, 171, 128, 0, 218, 150, 121, 197, 16, 120, 32, 48, 6, 107, 31, 127, 216, 98, 157, 229, 183, 197, 48, 107, 186, 195, 162, 177, 8, 120, 73, 88, 236, 107, 191, 225, 40, 118, 74, 201, 255, 193, 249, 32, 156, 199, 98, 112, 59, 193, 138, 113, 247, 103, 150, 32, 160, 245, 162, 229, 155, 24, 114, 36, 234, 192, 3, 68, 71, 171, 141, 178, 28, 242, 94, 114, 25, 24, 39, 175, 4, 100, 194, 30, 57, 117, 21, 158, 19, 83, 236, 226, 174, 40, 132, 46, 75, 198, 13, 199, 62, 25, 67, 171, 55, 160, 109, 59, 40, 27, 217, 233, 144, 89, 92, 74, 218, 122, 69, 157, 161, 157, 26, 233, 165, 58, 29, 2, 57, 216, 46, 213, 9, 121, 151, 242, 153, 167, 120, 251, 135, 11, 52, 155, 204, 153, 250, 111, 84, 68, 65, 8, 247, 158, 112, 146, 229, 72, 125, 210, 5, 140, 237, 237, 237, 78, 230, 153, 24, 60, 227, 213, 249, 143, 221, 89, 51, 5, 75, 171, 17]),
                g: BigNumber::from_slice([5, 59]),
                v: BigNumber::from_slice([175, 130, 205, 239, 209, 212, 9, 27, 116, 47, 84, 58, 245, 35, 58, 80, 112, 34, 74, 13, 150, 228, 59, 92, 151, 156, 185, 198, 86, 146, 128, 122, 27, 85, 227, 252, 164, 34, 204, 121, 22, 18, 167, 101, 184, 218, 63, 86, 167, 71, 148, 80, 168, 149, 21, 250, 140, 121, 162, 34, 92, 73, 60, 55, 135, 209, 51, 111, 50, 109, 214, 30, 65, 153, 244, 23, 84, 186, 154, 171, 26, 120, 157, 152, 117, 189, 122, 198, 170, 205, 191, 130, 37, 46, 92, 134, 74, 91, 202, 6, 107, 248, 104, 161, 61, 210, 89, 171, 20, 38, 249, 134, 32, 192, 222, 89, 140, 219, 164, 88, 123, 57, 245, 146, 42, 205, 188, 84, 130, 225, 108, 4, 142, 188, 128, 93, 164, 38, 183, 157, 194, 134, 104, 114, 104, 223, 145, 211, 25, 170, 104, 115, 34, 61, 78, 4, 202, 137, 203, 68, 243, 73, 134, 4, 151, 161, 34, 246, 69, 23, 17, 122, 219, 249, 129, 100, 145, 139, 171, 208, 154, 22, 220, 198, 71, 107, 60, 249, 249, 80, 150, 237, 6, 203, 202, 183, 184, 53, 223, 120, 107, 83, 14, 221, 169, 80, 160, 19, 21, 182, 159, 37, 10, 194, 250, 102, 69, 207, 120, 254, 138, 130, 17, 65, 254, 239, 87, 228, 202, 77, 196, 51, 28, 22, 220, 155, 243, 224, 254, 198, 188, 218, 250, 113, 154, 251, 252, 25, 95, 231, 44, 25, 195, 157, 138, 126]),
            }
        }, ZkSetupProof {
            dlog_proof: CompositeDLogProof {
                x: BigNumber::from_slice([44, 51, 11, 43, 230, 177, 137, 182, 209, 135, 18, 120, 93, 52, 47, 183, 136, 95, 240, 24, 119, 232, 62, 188, 165, 16, 212, 182, 156, 181, 31, 198, 81, 174, 195, 30, 145, 185, 176, 150, 121, 130, 208, 218, 58, 84, 245, 103, 4, 128, 66, 165, 131, 27, 222, 2, 60, 158, 139, 79, 54, 86, 119, 81, 7, 13, 45, 194, 94, 129, 110, 121, 66, 59, 242, 196, 85, 76, 127, 160, 70, 99, 14, 234, 68, 154, 41, 227, 141, 141, 73, 50, 214, 177, 72, 2, 108, 179, 2, 86, 171, 234, 57, 22, 150, 225, 17, 247, 1, 58, 209, 82, 254, 73, 83, 150, 206, 10, 61, 187, 104, 57, 175, 154, 172, 186, 8, 84, 31, 25, 207, 95, 131, 138, 12, 128, 54, 0, 51, 154, 116, 71, 151, 149, 56, 120, 131, 83, 222, 18, 198, 197, 14, 222, 222, 253, 203, 72, 87, 92, 42, 47, 24, 50, 242, 74, 147, 237, 196, 5, 83, 70, 158, 215, 6, 237, 47, 132, 74, 158, 242, 10, 179, 78, 189, 74, 37, 119, 192, 111, 30, 92, 192, 113, 100, 30, 239, 220, 208, 162, 241, 57, 247, 164, 18, 92, 144, 81, 252, 33, 88, 200, 234, 211, 43, 81, 233, 8, 239, 228, 103, 29, 87, 109, 33, 106, 219, 245, 249, 135, 92, 127, 201, 149, 125, 93, 210, 18, 12, 253, 164, 191, 44, 67, 81, 59, 143, 242, 9, 164, 93, 149, 29, 21, 88, 177]),
                y: BigNumber::from_slice([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 143, 219, 74, 217, 216, 245, 20, 111, 41, 144, 22, 255, 70, 239, 181, 228, 234, 99, 49, 104, 130, 39, 145, 91, 152, 42, 194, 23, 91, 85, 79, 16, 132, 152]),
            },
            dlog_proof_inv: CompositeDLogProof {
                x: BigNumber::from_slice([69, 149, 106, 62, 190, 127, 178, 11, 108, 104, 119, 93, 203, 37, 175, 244, 25, 88, 54, 229, 32, 239, 126, 235, 229, 82, 237, 3, 122, 33, 238, 20, 209, 190, 120, 72, 87, 81, 94, 145, 40, 151, 234, 136, 159, 103, 240, 82, 150, 145, 41, 246, 5, 229, 98, 177, 70, 238, 159, 179, 252, 52, 184, 215, 54, 77, 141, 91, 212, 84, 186, 81, 146, 254, 224, 64, 18, 177, 188, 44, 58, 64, 191, 105, 181, 29, 237, 12, 44, 240, 82, 244, 222, 241, 208, 163, 149, 22, 240, 138, 241, 219, 28, 140, 214, 2, 242, 249, 117, 198, 18, 255, 149, 129, 218, 242, 151, 107, 146, 97, 27, 103, 29, 196, 96, 0, 105, 67, 250, 141, 118, 13, 51, 103, 167, 17, 96, 26, 66, 101, 245, 150, 209, 106, 187, 221, 187, 188, 216, 162, 78, 72, 150, 175, 190, 227, 162, 116, 88, 209, 153, 114, 207, 24, 52, 63, 159, 6, 49, 238, 104, 136, 119, 70, 166, 73, 30, 244, 16, 200, 13, 78, 111, 236, 206, 182, 47, 110, 131, 80, 212, 12, 188, 166, 26, 25, 92, 141, 186, 126, 209, 18, 194, 67, 209, 226, 97, 229, 206, 54, 27, 0, 162, 172, 54, 233, 66, 171, 1, 229, 182, 253, 162, 124, 226, 237, 224, 108, 37, 170, 150, 195, 19, 129, 143, 169, 52, 217, 36, 251, 176, 192, 225, 41, 41, 117, 204, 168, 182, 211, 179, 222, 255, 222, 154, 156]),
                y: BigNumber::from_slice([234, 248, 133, 124, 61, 18, 247, 87, 143, 194, 81, 7, 172, 93, 167, 237, 72, 132, 6, 209, 199, 135, 45, 207, 106, 135, 123, 162, 64, 36, 0, 79, 73, 224, 78, 83, 239, 211, 112, 77, 125, 208, 141, 118, 105, 35, 10, 20, 3, 108, 25, 112, 89, 92, 92, 181, 56, 178, 126, 183, 146, 166, 3, 136, 142, 151, 14, 227, 53, 210, 157, 63, 54, 43, 99, 90, 242, 178, 146, 97, 198, 10, 68, 160, 150, 215, 42, 197, 220, 133, 94, 37, 158, 13, 128, 174, 106, 154, 157, 207, 117, 130, 77, 246, 14, 69, 176, 203, 232, 164, 102, 71, 172, 141, 103, 148, 35, 50, 11, 151, 23, 208, 7, 101, 39, 145, 13, 230, 75, 109, 138, 162, 251, 20, 115, 46, 201, 246, 74, 190, 137, 4, 9, 224, 149, 147, 196, 213, 13, 221, 186, 244, 206, 81, 151, 40, 51, 156, 45, 222, 201, 80, 59, 17, 95, 42, 178, 242, 44, 15, 46, 254, 196, 213, 185, 101, 160, 25, 231, 130, 13, 188, 121, 3, 82, 254, 37, 30, 33, 156, 251, 223, 118, 47, 188, 175, 121, 65, 45, 19, 11, 94, 152, 217, 117, 70, 61, 170, 142, 165, 53, 52, 131, 205, 71, 136, 1, 108, 34, 57, 224, 218, 35, 116, 170, 111, 6, 114, 193, 6, 209, 249, 95, 253, 178, 89, 167, 210, 14, 69, 191, 222, 52, 191, 141, 149, 200, 147, 218, 74, 121, 146, 141, 242, 159, 156]),
            },
        }),
        1 => (ZkSetup {
            dlog_stmt: CompositeDLogStmtBase {
                n: BigNumber::from_slice([201, 67, 126, 214, 219, 214, 84, 141, 207, 198, 181, 185, 160, 138, 233, 53, 167, 18, 101, 216, 224, 1, 193, 100, 202, 135, 111, 110, 162, 255, 140, 163, 38, 114, 228, 11, 222, 137, 98, 95, 212, 90, 137, 98, 168, 188, 181, 101, 197, 140, 207, 83, 211, 103, 52, 181, 180, 223, 225, 253, 43, 100, 27, 9, 248, 53, 154, 102, 188, 133, 68, 36, 15, 34, 132, 194, 101, 72, 212, 22, 192, 140, 229, 96, 155, 194, 172, 171, 247, 82, 205, 91, 170, 100, 206, 217, 30, 96, 59, 188, 68, 142, 211, 146, 162, 60, 115, 146, 94, 242, 104, 89, 111, 145, 236, 17, 172, 195, 53, 19, 81, 107, 209, 214, 84, 97, 210, 252, 118, 116, 42, 186, 227, 7, 141, 255, 224, 31, 54, 115, 9, 87, 126, 172, 197, 141, 190, 218, 160, 67, 170, 80, 121, 167, 114, 224, 108, 101, 208, 164, 207, 34, 224, 95, 42, 37, 33, 79, 47, 223, 247, 33, 133, 43, 103, 248, 179, 57, 46, 66, 204, 236, 247, 26, 199, 213, 161, 143, 194, 95, 70, 221, 102, 163, 222, 132, 107, 231, 242, 135, 124, 193, 89, 227, 6, 221, 128, 29, 54, 179, 253, 201, 176, 13, 33, 206, 197, 122, 253, 149, 223, 176, 199, 2, 24, 233, 129, 42, 247, 149, 127, 37, 38, 56, 180, 242, 154, 123, 144, 14, 169, 68, 208, 30, 243, 86, 4, 87, 111, 201, 68, 87, 77, 172, 115, 253]),
                g: BigNumber::from_slice([5, 58]),
                v: BigNumber::from_slice([168, 246, 44, 62, 206, 67, 183, 160, 242, 240, 192, 240, 238, 213, 65, 20, 197, 91, 198, 158, 120, 85, 168, 182, 114, 10, 123, 198, 59, 160, 138, 239, 36, 171, 58, 70, 200, 132, 211, 109, 56, 223, 175, 144, 7, 168, 171, 152, 18, 159, 231, 72, 195, 97, 141, 137, 37, 0, 80, 223, 12, 178, 77, 33, 189, 101, 169, 152, 252, 71, 9, 148, 194, 177, 149, 148, 192, 69, 245, 187, 28, 67, 185, 226, 79, 25, 19, 169, 68, 192, 8, 14, 249, 179, 80, 215, 154, 172, 148, 174, 173, 2, 105, 18, 202, 187, 151, 158, 243, 119, 81, 208, 123, 218, 86, 99, 165, 188, 189, 165, 84, 168, 21, 64, 137, 53, 28, 171, 221, 75, 171, 249, 227, 31, 14, 73, 184, 142, 8, 15, 4, 11, 173, 105, 149, 19, 240, 22, 31, 177, 189, 150, 183, 92, 132, 224, 68, 120, 241, 172, 208, 167, 34, 166, 150, 14, 196, 117, 38, 228, 94, 166, 207, 138, 10, 149, 81, 70, 72, 102, 249, 121, 23, 218, 152, 121, 135, 164, 27, 67, 179, 252, 247, 219, 42, 208, 40, 244, 142, 162, 81, 154, 33, 216, 15, 235, 207, 139, 230, 247, 17, 209, 182, 213, 195, 228, 147, 60, 191, 13, 4, 135, 170, 96, 25, 68, 204, 125, 34, 224, 77, 164, 83, 46, 36, 191, 236, 122, 158, 131, 231, 44, 137, 89, 12, 28, 166, 45, 245, 188, 5, 51, 114, 91, 214, 205]),
            }
        }, ZkSetupProof {
            dlog_proof: CompositeDLogProof {
                x: BigNumber::from_slice([189, 129, 125, 63, 7, 160, 132, 90, 115, 238, 89, 11, 120, 127, 177, 138, 244, 52, 175, 139, 42, 124, 21, 124, 71, 132, 123, 126, 185, 145, 75, 239, 116, 223, 31, 10, 156, 168, 76, 36, 123, 206, 195, 9, 0, 63, 63, 46, 134, 104, 62, 21, 213, 169, 23, 158, 218, 218, 132, 167, 165, 210, 69, 205, 81, 177, 13, 189, 127, 108, 67, 194, 82, 39, 112, 125, 19, 131, 104, 223, 185, 130, 184, 249, 64, 57, 84, 156, 110, 15, 171, 70, 165, 67, 106, 78, 252, 135, 243, 47, 160, 84, 251, 177, 84, 18, 6, 52, 168, 216, 6, 92, 54, 17, 206, 90, 145, 210, 22, 110, 216, 82, 50, 109, 139, 81, 79, 25, 144, 68, 72, 247, 203, 103, 190, 237, 247, 22, 151, 3, 81, 22, 101, 56, 25, 253, 117, 142, 148, 215, 143, 68, 12, 73, 199, 23, 21, 54, 49, 1, 7, 52, 76, 105, 72, 234, 146, 33, 92, 102, 77, 96, 214, 220, 4, 47, 246, 232, 77, 108, 183, 227, 161, 71, 192, 205, 27, 107, 162, 195, 195, 252, 213, 163, 223, 226, 64, 248, 169, 15, 197, 215, 255, 37, 177, 229, 36, 10, 32, 137, 26, 65, 79, 61, 219, 62, 124, 18, 39, 22, 45, 162, 114, 229, 43, 83, 57, 97, 135, 58, 246, 139, 216, 115, 59, 126, 184, 37, 247, 124, 53, 213, 52, 83, 21, 54, 100, 168, 162, 98, 216, 198, 254, 95, 58, 196]),
                y: BigNumber::from_slice([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 36, 64, 74, 204, 207, 9, 254, 152, 220, 236, 99, 193, 222, 49, 119, 25, 164, 0, 148, 134, 100, 66, 8, 59, 237, 109, 165, 127, 75, 136, 26, 252, 140, 156]),
            },
            dlog_proof_inv: CompositeDLogProof {
                x: BigNumber::from_slice([29, 110, 83, 163, 11, 57, 123, 234, 30, 22, 114, 2, 224, 113, 233, 229, 7, 138, 115, 167, 43, 249, 171, 190, 246, 96, 114, 253, 255, 134, 10, 216, 197, 240, 115, 247, 154, 169, 9, 52, 44, 132, 168, 77, 234, 121, 95, 250, 87, 241, 144, 130, 125, 99, 2, 139, 153, 78, 196, 156, 243, 2, 246, 52, 228, 0, 106, 10, 105, 128, 151, 55, 78, 161, 128, 90, 252, 173, 207, 222, 249, 194, 125, 214, 135, 148, 167, 165, 68, 248, 62, 48, 134, 191, 76, 207, 126, 228, 174, 229, 86, 166, 90, 56, 198, 161, 127, 150, 127, 194, 203, 44, 121, 73, 0, 112, 220, 230, 202, 233, 229, 51, 142, 20, 200, 198, 38, 177, 70, 107, 12, 246, 190, 202, 245, 51, 171, 81, 21, 36, 195, 197, 143, 108, 161, 123, 154, 64, 137, 45, 206, 183, 89, 6, 104, 253, 70, 74, 221, 16, 51, 117, 32, 250, 227, 59, 46, 180, 46, 224, 138, 40, 244, 194, 21, 116, 137, 45, 201, 222, 36, 170, 230, 63, 26, 159, 123, 121, 213, 46, 182, 41, 208, 99, 181, 222, 168, 202, 38, 115, 19, 111, 143, 38, 163, 35, 33, 222, 145, 20, 171, 57, 26, 71, 225, 184, 106, 218, 166, 7, 240, 140, 35, 230, 14, 93, 29, 203, 75, 229, 110, 156, 206, 6, 22, 180, 45, 70, 218, 159, 121, 148, 76, 179, 244, 28, 131, 212, 20, 237, 150, 45, 153, 164, 102, 16]),
                y: BigNumber::from_slice([201, 66, 173, 38, 176, 13, 32, 77, 13, 39, 43, 9, 125, 53, 227, 47, 203, 158, 165, 62, 134, 167, 228, 30, 45, 225, 126, 40, 170, 236, 108, 242, 171, 177, 43, 34, 30, 83, 154, 179, 201, 127, 9, 113, 52, 250, 115, 179, 92, 41, 23, 37, 177, 153, 182, 202, 103, 6, 124, 36, 202, 238, 217, 168, 104, 191, 24, 81, 50, 150, 226, 216, 20, 138, 11, 103, 187, 5, 61, 167, 176, 38, 119, 81, 191, 139, 25, 78, 159, 155, 171, 125, 135, 82, 108, 93, 101, 1, 142, 153, 76, 37, 156, 224, 61, 223, 146, 10, 74, 200, 167, 251, 129, 31, 0, 135, 45, 55, 182, 152, 60, 109, 149, 144, 153, 90, 228, 77, 192, 138, 182, 38, 176, 12, 80, 241, 87, 165, 172, 69, 166, 18, 116, 60, 238, 151, 9, 225, 139, 147, 63, 146, 248, 62, 253, 221, 126, 99, 109, 179, 89, 6, 69, 2, 92, 68, 123, 162, 12, 211, 73, 223, 146, 195, 182, 74, 214, 8, 129, 103, 197, 239, 66, 202, 64, 122, 179, 127, 156, 188, 108, 134, 119, 166, 107, 24, 107, 148, 40, 218, 67, 152, 252, 254, 63, 248, 211, 74, 48, 40, 117, 254, 4, 123, 216, 118, 68, 100, 136, 28, 166, 75, 149, 135, 107, 33, 166, 164, 69, 10, 77, 79, 35, 213, 81, 157, 176, 101, 53, 238, 179, 157, 8, 226, 58, 222, 84, 51, 192, 199, 255, 199, 16, 28, 222, 150]),
            },
        }),
        2 => (ZkSetup {
            dlog_stmt: CompositeDLogStmtBase {
                n: BigNumber::from_slice([166, 131, 175, 87, 140, 227, 43, 188, 249, 73, 68, 251, 157, 231, 32, 44, 95, 34, 112, 47, 198, 12, 96, 169, 34, 239, 239, 251, 240, 84, 33, 65, 33, 3, 53, 233, 13, 253, 153, 24, 126, 11, 0, 62, 187, 246, 136, 14, 161, 135, 149, 246, 133, 60, 216, 167, 172, 85, 159, 220, 77, 171, 156, 26, 246, 46, 128, 17, 250, 97, 218, 245, 168, 174, 197, 181, 246, 94, 186, 181, 46, 37, 169, 128, 131, 45, 129, 29, 241, 27, 184, 96, 195, 250, 147, 59, 134, 224, 17, 249, 50, 23, 174, 173, 243, 179, 56, 11, 103, 239, 127, 137, 14, 125, 200, 75, 235, 246, 27, 135, 155, 120, 114, 28, 86, 88, 57, 38, 84, 33, 82, 115, 106, 211, 178, 141, 0, 57, 222, 235, 73, 78, 110, 23, 41, 126, 46, 30, 23, 96, 97, 217, 234, 236, 199, 129, 76, 187, 110, 213, 82, 104, 218, 97, 23, 200, 234, 66, 177, 164, 1, 2, 216, 97, 178, 84, 134, 226, 204, 46, 126, 199, 253, 94, 115, 167, 34, 25, 131, 180, 49, 81, 243, 181, 179, 231, 91, 155, 10, 6, 84, 107, 20, 227, 65, 52, 67, 135, 2, 159, 196, 54, 117, 133, 10, 42, 83, 154, 31, 195, 123, 244, 35, 25, 131, 25, 161, 254, 20, 103, 140, 204, 229, 38, 157, 32, 59, 239, 8, 117, 170, 171, 167, 133, 87, 85, 164, 85, 205, 77, 100, 197, 136, 115, 85, 27]),
                g: BigNumber::from_slice([5, 61]),
                v: BigNumber::from_slice([151, 187, 107, 132, 47, 169, 225, 74, 159, 228, 163, 148, 44, 40, 249, 15, 139, 172, 180, 202, 214, 49, 36, 145, 40, 92, 140, 75, 181, 245, 118, 203, 182, 215, 243, 14, 177, 227, 151, 211, 22, 228, 139, 5, 226, 173, 199, 31, 122, 231, 174, 214, 142, 183, 15, 63, 118, 190, 161, 127, 85, 246, 215, 25, 200, 244, 164, 245, 214, 225, 13, 214, 130, 98, 232, 62, 190, 126, 98, 72, 112, 170, 191, 124, 248, 136, 232, 52, 19, 134, 166, 29, 205, 40, 123, 253, 18, 47, 172, 20, 198, 125, 199, 81, 49, 221, 123, 89, 160, 73, 155, 92, 164, 106, 76, 179, 246, 183, 4, 131, 18, 203, 30, 180, 68, 28, 166, 122, 122, 93, 240, 193, 115, 216, 180, 228, 209, 9, 75, 57, 230, 135, 83, 254, 86, 167, 153, 252, 249, 220, 20, 217, 182, 96, 225, 193, 173, 207, 248, 45, 255, 133, 137, 60, 183, 199, 177, 245, 134, 83, 199, 139, 141, 36, 198, 226, 109, 255, 240, 212, 228, 167, 193, 221, 253, 227, 123, 204, 203, 7, 176, 58, 25, 120, 61, 116, 254, 28, 145, 228, 217, 183, 74, 58, 25, 246, 209, 153, 207, 141, 159, 124, 204, 5, 186, 17, 61, 85, 78, 28, 143, 103, 76, 25, 191, 191, 7, 235, 67, 24, 70, 226, 38, 194, 44, 207, 78, 161, 108, 174, 10, 222, 29, 7, 86, 3, 192, 223, 140, 235, 106, 35, 245, 92, 253, 12]),
            }
        }, ZkSetupProof {
            dlog_proof: CompositeDLogProof {
                x: BigNumber::from_slice([19, 22, 111, 93, 78, 111, 54, 73, 187, 15, 51, 162, 116, 20, 215, 180, 51, 188, 9, 222, 233, 205, 223, 8, 70, 165, 89, 224, 184, 1, 118, 147, 68, 115, 59, 124, 120, 151, 221, 41, 90, 141, 121, 29, 235, 108, 50, 79, 255, 201, 212, 223, 251, 220, 146, 246, 200, 148, 78, 160, 29, 99, 89, 173, 233, 103, 71, 160, 80, 210, 64, 77, 195, 124, 37, 87, 60, 227, 232, 7, 215, 201, 37, 236, 179, 0, 120, 49, 55, 106, 238, 226, 230, 170, 156, 234, 18, 162, 184, 145, 51, 234, 134, 46, 197, 71, 205, 213, 68, 173, 60, 183, 167, 147, 186, 185, 39, 111, 163, 176, 12, 141, 77, 115, 90, 160, 231, 168, 238, 61, 2, 126, 222, 183, 210, 88, 117, 37, 230, 77, 210, 67, 121, 175, 174, 88, 12, 247, 219, 61, 220, 216, 253, 14, 62, 223, 56, 15, 231, 193, 95, 183, 224, 225, 44, 74, 162, 88, 42, 157, 150, 200, 42, 38, 96, 231, 124, 127, 145, 140, 143, 132, 5, 129, 234, 145, 131, 245, 95, 100, 96, 148, 191, 7, 39, 30, 221, 40, 46, 97, 58, 96, 149, 114, 116, 47, 148, 62, 149, 121, 8, 16, 171, 49, 237, 37, 88, 187, 61, 223, 170, 253, 216, 116, 109, 138, 239, 74, 143, 213, 19, 42, 242, 152, 68, 185, 45, 91, 42, 253, 47, 148, 32, 213, 129, 112, 114, 220, 85, 185, 126, 220, 202, 255, 30, 28]),
                y: BigNumber::from_slice([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 80, 25, 147, 9, 207, 251, 3, 205, 237, 128, 116, 100, 216, 94, 70, 162, 154, 24, 131, 242, 47, 207, 55, 23, 177, 211, 140, 29, 173, 163, 14, 221, 233, 92]),
            },
            dlog_proof_inv: CompositeDLogProof {
                x: BigNumber::from_slice([102, 26, 111, 114, 85, 110, 88, 64, 91, 34, 196, 65, 139, 114, 16, 206, 229, 12, 29, 138, 93, 215, 100, 115, 160, 65, 204, 70, 210, 147, 82, 16, 59, 29, 81, 131, 102, 0, 111, 135, 243, 70, 37, 50, 28, 170, 45, 161, 228, 112, 86, 143, 65, 192, 54, 0, 64, 219, 85, 73, 14, 162, 182, 16, 31, 237, 86, 167, 163, 177, 230, 200, 39, 192, 130, 22, 50, 35, 251, 197, 198, 225, 249, 138, 240, 32, 54, 7, 203, 22, 159, 211, 29, 115, 183, 231, 96, 168, 145, 158, 141, 251, 155, 126, 80, 31, 206, 12, 115, 0, 75, 136, 236, 103, 66, 238, 249, 135, 175, 109, 27, 152, 209, 120, 208, 109, 115, 36, 59, 56, 0, 89, 164, 64, 213, 19, 30, 54, 96, 149, 183, 134, 225, 245, 4, 55, 81, 80, 111, 179, 8, 246, 24, 214, 69, 224, 152, 87, 159, 236, 143, 170, 24, 29, 12, 73, 122, 186, 95, 21, 133, 229, 22, 51, 47, 161, 39, 146, 50, 179, 50, 17, 76, 119, 180, 225, 182, 232, 116, 25, 4, 209, 241, 230, 8, 206, 125, 221, 9, 103, 225, 198, 32, 3, 187, 12, 158, 153, 10, 233, 60, 235, 47, 84, 152, 230, 152, 121, 167, 237, 209, 11, 178, 46, 102, 14, 207, 162, 164, 252, 249, 86, 59, 23, 95, 255, 218, 228, 120, 4, 136, 252, 137, 83, 185, 157, 45, 195, 234, 126, 152, 177, 12, 249, 183, 65]),
                y: BigNumber::from_slice([166, 130, 213, 46, 12, 69, 226, 112, 127, 195, 82, 216, 131, 120, 153, 224, 11, 9, 62, 11, 119, 117, 181, 51, 85, 229, 30, 94, 22, 200, 211, 80, 98, 75, 145, 18, 213, 6, 6, 245, 31, 85, 170, 65, 66, 221, 164, 192, 14, 107, 61, 140, 146, 39, 8, 102, 114, 172, 94, 204, 155, 143, 254, 220, 130, 10, 222, 110, 59, 104, 230, 144, 0, 213, 149, 36, 191, 254, 57, 169, 154, 237, 21, 98, 5, 214, 198, 191, 115, 74, 149, 117, 216, 18, 155, 209, 60, 247, 56, 8, 214, 1, 138, 195, 152, 211, 232, 125, 215, 69, 181, 109, 205, 34, 215, 63, 54, 107, 222, 149, 247, 28, 220, 1, 201, 9, 254, 192, 255, 226, 48, 6, 203, 49, 165, 144, 47, 189, 124, 66, 0, 237, 162, 114, 241, 245, 80, 233, 179, 3, 213, 143, 11, 86, 49, 43, 90, 99, 226, 28, 83, 236, 61, 212, 128, 236, 235, 150, 35, 157, 226, 132, 217, 76, 107, 116, 98, 66, 136, 93, 179, 140, 128, 62, 32, 35, 49, 17, 150, 30, 209, 200, 194, 225, 111, 175, 47, 79, 13, 36, 43, 252, 79, 6, 173, 9, 52, 205, 78, 108, 173, 71, 228, 253, 62, 192, 68, 188, 246, 156, 63, 49, 42, 239, 51, 202, 175, 29, 109, 252, 156, 59, 142, 6, 149, 92, 169, 28, 117, 140, 118, 171, 70, 143, 175, 89, 206, 249, 159, 42, 58, 215, 71, 202, 200, 133]),
            },
        }),
        3 => (ZkSetup {
            dlog_stmt: CompositeDLogStmtBase {
                n: BigNumber::from_slice([183, 194, 232, 120, 12, 190, 197, 149, 170, 230, 209, 195, 163, 19, 88, 156, 145, 223, 82, 173, 91, 234, 210, 226, 31, 104, 30, 137, 114, 161, 134, 32, 22, 147, 239, 135, 151, 23, 86, 177, 213, 40, 175, 206, 87, 164, 33, 83, 94, 48, 35, 213, 138, 29, 199, 226, 128, 233, 48, 200, 130, 186, 24, 194, 154, 168, 79, 89, 18, 206, 244, 85, 179, 108, 104, 32, 119, 169, 166, 101, 185, 103, 26, 245, 8, 69, 242, 103, 241, 3, 88, 186, 186, 0, 180, 216, 184, 180, 46, 94, 105, 0, 54, 196, 112, 85, 244, 16, 229, 194, 23, 228, 230, 208, 25, 236, 195, 131, 193, 196, 162, 205, 48, 184, 105, 186, 245, 89, 129, 223, 11, 40, 56, 25, 90, 130, 15, 241, 72, 93, 14, 190, 203, 146, 195, 158, 80, 230, 128, 117, 112, 181, 239, 223, 2, 100, 144, 105, 167, 193, 207, 247, 105, 242, 116, 253, 11, 17, 52, 13, 212, 253, 188, 145, 222, 2, 124, 201, 189, 11, 19, 0, 248, 38, 85, 60, 233, 88, 85, 90, 13, 177, 175, 42, 215, 53, 246, 177, 48, 93, 168, 124, 43, 229, 142, 127, 155, 121, 207, 192, 80, 121, 161, 19, 184, 136, 184, 6, 95, 8, 8, 53, 44, 18, 158, 22, 144, 72, 82, 115, 39, 114, 42, 43, 137, 229, 32, 251, 13, 226, 128, 112, 237, 130, 143, 195, 36, 30, 137, 1, 231, 138, 56, 242, 132, 93]),
                g: BigNumber::from_slice([5, 66]),
                v: BigNumber::from_slice([137, 8, 185, 178, 36, 17, 219, 128, 118, 128, 21, 144, 172, 171, 153, 113, 161, 80, 231, 184, 117, 228, 231, 124, 221, 225, 120, 37, 160, 158, 13, 191, 181, 4, 104, 143, 3, 18, 215, 222, 115, 176, 250, 176, 139, 7, 168, 53, 124, 3, 109, 52, 64, 64, 225, 85, 93, 52, 92, 245, 145, 167, 2, 146, 77, 44, 139, 210, 162, 201, 36, 151, 96, 61, 24, 27, 230, 143, 199, 18, 132, 21, 187, 85, 60, 110, 118, 11, 240, 32, 152, 140, 40, 206, 62, 8, 196, 42, 148, 178, 95, 13, 156, 152, 131, 145, 205, 148, 104, 185, 220, 121, 21, 15, 72, 130, 12, 108, 2, 238, 31, 171, 255, 91, 130, 125, 1, 126, 88, 199, 10, 65, 116, 213, 99, 120, 200, 113, 157, 56, 217, 193, 18, 116, 148, 157, 220, 87, 147, 60, 13, 53, 251, 1, 171, 214, 158, 203, 214, 38, 46, 106, 218, 207, 188, 59, 247, 142, 248, 231, 2, 59, 163, 198, 157, 157, 98, 89, 117, 201, 83, 0, 240, 30, 149, 9, 62, 6, 89, 83, 124, 34, 252, 165, 99, 235, 115, 173, 154, 50, 66, 230, 203, 155, 200, 143, 204, 1, 117, 96, 193, 163, 94, 66, 67, 115, 86, 32, 32, 44, 37, 23, 184, 137, 33, 137, 253, 21, 60, 129, 137, 113, 137, 87, 5, 19, 60, 0, 253, 194, 173, 21, 229, 114, 35, 193, 175, 66, 89, 45, 250, 84, 62, 157, 221, 188]),
            }
        }, ZkSetupProof {
            dlog_proof: CompositeDLogProof {
                x: BigNumber::from_slice([30, 227, 65, 252, 93, 49, 20, 71, 186, 213, 191, 5, 55, 5, 216, 159, 223, 166, 78, 250, 52, 199, 231, 12, 50, 20, 239, 86, 112, 27, 182, 165, 61, 27, 40, 158, 57, 61, 97, 132, 84, 139, 162, 97, 120, 97, 80, 29, 86, 188, 100, 137, 204, 171, 105, 34, 47, 249, 20, 240, 118, 45, 190, 46, 137, 46, 188, 154, 45, 129, 221, 77, 33, 61, 35, 69, 54, 126, 75, 43, 26, 254, 144, 162, 179, 157, 192, 129, 43, 233, 212, 67, 102, 201, 12, 155, 9, 81, 44, 195, 53, 155, 18, 199, 219, 31, 250, 179, 187, 110, 80, 1, 112, 181, 25, 53, 94, 41, 104, 212, 154, 205, 0, 55, 226, 59, 45, 27, 165, 122, 255, 7, 130, 220, 234, 101, 102, 135, 202, 100, 78, 91, 217, 254, 221, 117, 170, 52, 223, 69, 95, 232, 59, 238, 65, 101, 180, 58, 90, 19, 227, 55, 18, 247, 235, 83, 240, 185, 89, 65, 0, 67, 178, 164, 173, 94, 15, 66, 85, 10, 7, 117, 131, 89, 20, 184, 123, 21, 71, 21, 57, 164, 133, 216, 124, 241, 21, 254, 215, 28, 214, 103, 214, 172, 56, 122, 186, 107, 99, 141, 46, 210, 220, 9, 88, 158, 58, 173, 106, 210, 33, 157, 71, 70, 250, 104, 197, 237, 152, 58, 218, 183, 52, 104, 125, 140, 92, 146, 116, 223, 176, 15, 14, 190, 127, 217, 76, 216, 144, 171, 149, 80, 32, 8, 251, 6]),
                y: BigNumber::from_slice([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 169, 52, 186, 102, 148, 244, 124, 224, 3, 93, 210, 142, 177, 240, 47, 56, 84, 107, 205, 97, 110, 121, 42, 87, 110, 42, 254, 207, 1, 254, 235, 242, 153, 128]),
            },
            dlog_proof_inv: CompositeDLogProof {
                x: BigNumber::from_slice([78, 244, 16, 33, 27, 149, 2, 239, 41, 138, 94, 118, 100, 94, 237, 150, 222, 150, 118, 230, 179, 13, 9, 143, 255, 25, 218, 201, 232, 66, 16, 197, 27, 3, 24, 72, 121, 156, 203, 176, 87, 239, 199, 197, 226, 253, 109, 8, 22, 65, 255, 0, 195, 118, 47, 33, 176, 195, 173, 248, 27, 173, 190, 61, 178, 144, 75, 246, 193, 139, 231, 127, 196, 128, 2, 87, 217, 8, 207, 229, 109, 70, 23, 110, 229, 51, 83, 145, 141, 44, 151, 199, 253, 127, 151, 11, 68, 28, 20, 31, 208, 151, 183, 25, 33, 236, 196, 143, 15, 233, 19, 37, 20, 62, 136, 211, 71, 38, 116, 171, 17, 34, 78, 31, 41, 177, 9, 81, 80, 222, 145, 120, 132, 133, 78, 11, 36, 9, 233, 91, 104, 95, 155, 71, 36, 92, 218, 91, 253, 162, 36, 159, 55, 255, 161, 55, 239, 169, 239, 78, 241, 254, 56, 64, 155, 87, 42, 60, 50, 197, 44, 94, 38, 228, 4, 102, 88, 105, 87, 137, 102, 95, 214, 124, 112, 146, 83, 36, 56, 212, 196, 217, 112, 177, 181, 236, 136, 85, 190, 195, 252, 231, 142, 37, 54, 164, 178, 198, 170, 126, 118, 229, 155, 5, 119, 116, 12, 16, 15, 87, 180, 101, 80, 244, 10, 82, 38, 88, 6, 25, 203, 114, 216, 101, 182, 93, 193, 28, 20, 236, 111, 222, 83, 211, 64, 143, 119, 113, 218, 255, 165, 233, 13, 58, 203, 192]),
                y: BigNumber::from_slice([183, 194, 21, 87, 35, 30, 30, 218, 27, 97, 162, 74, 124, 9, 61, 35, 149, 132, 191, 40, 223, 239, 70, 183, 1, 202, 51, 227, 232, 244, 126, 199, 215, 16, 52, 174, 88, 159, 225, 147, 4, 248, 104, 154, 245, 201, 169, 18, 215, 173, 50, 126, 237, 37, 103, 199, 156, 170, 187, 65, 80, 171, 132, 52, 250, 54, 151, 14, 73, 210, 109, 211, 59, 179, 242, 179, 114, 232, 101, 242, 95, 51, 30, 118, 57, 92, 226, 67, 78, 255, 29, 70, 122, 200, 18, 133, 123, 182, 145, 240, 81, 95, 201, 47, 247, 196, 165, 253, 13, 31, 117, 82, 7, 30, 50, 162, 165, 14, 65, 24, 0, 103, 166, 116, 5, 137, 208, 229, 246, 81, 177, 209, 155, 232, 28, 91, 77, 55, 134, 77, 22, 113, 35, 247, 34, 187, 209, 62, 8, 29, 130, 99, 14, 243, 104, 107, 33, 253, 238, 182, 194, 111, 156, 147, 9, 177, 24, 235, 228, 240, 75, 213, 138, 199, 246, 136, 97, 228, 205, 82, 137, 85, 132, 204, 159, 37, 19, 29, 129, 244, 221, 143, 94, 208, 204, 19, 168, 11, 106, 196, 112, 208, 28, 227, 88, 50, 22, 158, 140, 84, 47, 163, 182, 7, 87, 179, 197, 19, 198, 217, 193, 147, 78, 153, 31, 95, 234, 151, 32, 144, 118, 96, 195, 105, 21, 183, 175, 56, 10, 240, 140, 8, 75, 167, 20, 166, 236, 68, 69, 109, 213, 229, 154, 21, 68, 147]),
            },
        }),

        _ => panic!("bad index: {}", i)
    }
}
